
P1.elf:     file format elf32-littlenios2
P1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000ab8 memsz 0x00000ab8 flags r-x
    LOAD off    0x00001ad8 vaddr 0x00008ad8 paddr 0x00008bcc align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00001cc0 vaddr 0x00008cc0 paddr 0x00008cc0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001bcc  2**0
                  CONTENTS
  2 .text         00000a04  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b4  00008a24  00008a24  00001a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00008ad8  00008bcc  00001ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008cc0  00008cc0  00001cc0  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00008cd0  00008cd0  00001bcc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000300  00000000  00000000  00001bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003602  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013c7  00000000  00000000  000054f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000172a  00000000  00000000  000068b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000454  00000000  00000000  00007fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e18  00000000  00000000  00008438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c4e  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00009ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  00009ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b13e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000b141  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b146  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b147  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000b148  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY
 26 .jdi          00004836  00000000  00000000  0000b197  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043602  00000000  00000000  0000f9cd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008a24 l    d  .rodata	00000000 .rodata
00008ad8 l    d  .rwdata	00000000 .rwdata
00008cc0 l    d  .bss	00000000 .bss
00008cd0 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../P1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00008ad8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000083f4 g     F .text	0000001c putchar
000086c8 g     F .text	0000002c alt_main
00008bcc g       *ABS*	00000000 __flash_rwdata_start
00008bc0 g     O .rwdata	00000004 rs232
00008840 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008cc0 g     O .bss	00000004 errno
00008cc8 g     O .bss	00000004 alt_argv
00010bb8 g       *ABS*	00000000 _gp
000086f4 g     F .text	00000004 usleep
00008bc4 g     O .rwdata	00000004 jtag
000082a8 g     F .text	000000d4 uart_write
000083ec g     F .text	00000008 _putchar_r
00008940 g     F .text	00000064 .hidden __udivsi3
00008bb8 g     O .rwdata	00000004 _global_impure_ptr
00008cd0 g       *ABS*	00000000 __bss_end
00008838 g     F .text	00000004 alt_dcache_flush_all
00008bcc g       *ABS*	00000000 __ram_rwdata_end
000086f8 g     F .text	00000060 write
00008480 g     F .text	00000058 _putc_r
00008ad8 g       *ABS*	00000000 __ram_rodata_end
000089a4 g     F .text	00000058 .hidden __umodsi3
00008cd0 g       *ABS*	00000000 end
0000e000 g       *ABS*	00000000 __alt_stack_pointer
0000877c g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008778 g     F .text	00000004 alt_sys_init
0000811c g     F .text	0000008c lcd_print
000089fc g     F .text	00000028 .hidden __mulsi3
00008ad8 g       *ABS*	00000000 __ram_rwdata_start
00008a24 g       *ABS*	00000000 __ram_rodata_start
000087b0 g     F .text	00000088 alt_busy_sleep
00008cd0 g       *ABS*	00000000 __alt_stack_base
000084d8 g     F .text	000000b8 __sfvwrite_small_dev
00008cc0 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000c0 lcd_init
000081a8 g     F .text	00000100 main
00008cc4 g     O .bss	00000004 alt_envp
00008bc8 g     O .rwdata	00000004 alt_errno
0000842c g     F .text	00000054 putc
00008848 g     F .text	00000084 .hidden __divsi3
00008a24 g       *ABS*	00000000 __flash_rodata_start
00008758 g     F .text	00000020 alt_irq_init
00008590 g     F .text	00000058 _write_r
00008bbc g     O .rwdata	00000004 _impure_ptr
00008ccc g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008bcc g       *ABS*	00000000 _edata
00008cd0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000837c g     F .text	00000070 uart_read
00008000 g       *ABS*	00000000 __alt_mem_memory
000088cc g     F .text	00000074 .hidden __modsi3
0000e000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008410 g     F .text	0000001c strlen
0000883c g     F .text	00000004 alt_icache_flush_all
000085e8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d682ee14 	ori	gp,gp,3000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a33014 	ori	r2,r2,36032

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e33414 	ori	r3,r3,36048

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff748c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00085e80 	call	85e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00086c80 	call	86c8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff74a0>

0000805c <lcd_init>:
#include <unistd.h>
#include "system.h"

void lcd_init() {
    805c:	defffc04 	addi	sp,sp,-16
	usleep(15000);
    8060:	010ea604 	movi	r4,15000
#include <unistd.h>
#include "system.h"

void lcd_init() {
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00315 	stw	ra,12(sp)
    8070:	dc400115 	stw	r17,4(sp)
	usleep(15000);
	ALT_CI_LCD(0,0x38);
    8074:	0021883a 	mov	r16,zero
#include <unistd.h>
#include "system.h"

void lcd_init() {
	usleep(15000);
    8078:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x38);
    807c:	04800e04 	movi	r18,56
    8080:	8485c032 	custom	0,r2,r16,r18

	usleep(4100);
    8084:	01040104 	movi	r4,4100
    8088:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x38);
    808c:	8485c032 	custom	0,r2,r16,r18

	usleep(100);
    8090:	04401904 	movi	r17,100
    8094:	8809883a 	mov	r4,r17
    8098:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x38);
    809c:	8485c032 	custom	0,r2,r16,r18

	usleep(5000);
    80a0:	0104e204 	movi	r4,5000
    80a4:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x38);
    80a8:	84a5c032 	custom	0,r18,r16,r18

	usleep(100);
    80ac:	8809883a 	mov	r4,r17
    80b0:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x08);
    80b4:	00800204 	movi	r2,8
    80b8:	8085c032 	custom	0,r2,r16,r2

	usleep(100);
    80bc:	8809883a 	mov	r4,r17
    80c0:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x0C);
    80c4:	00800304 	movi	r2,12
    80c8:	8085c032 	custom	0,r2,r16,r2

	usleep(100);
    80cc:	8809883a 	mov	r4,r17
    80d0:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x06);
    80d4:	00800184 	movi	r2,6
    80d8:	8085c032 	custom	0,r2,r16,r2

	usleep(100);
    80dc:	8809883a 	mov	r4,r17
    80e0:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x02);
    80e4:	00800084 	movi	r2,2
    80e8:	8085c032 	custom	0,r2,r16,r2

	usleep(2000);
    80ec:	0441f404 	movi	r17,2000
    80f0:	8809883a 	mov	r4,r17
    80f4:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x01);
    80f8:	00800044 	movi	r2,1
    80fc:	80a1c032 	custom	0,r16,r16,r2

	usleep(2000);
    8100:	8809883a 	mov	r4,r17
}
    8104:	dfc00317 	ldw	ra,12(sp)
    8108:	dc800217 	ldw	r18,8(sp)
    810c:	dc400117 	ldw	r17,4(sp)
    8110:	dc000017 	ldw	r16,0(sp)
    8114:	dec00404 	addi	sp,sp,16
	ALT_CI_LCD(0,0x02);

	usleep(2000);
	ALT_CI_LCD(0,0x01);

	usleep(2000);
    8118:	00086f41 	jmpi	86f4 <usleep>

0000811c <lcd_print>:
}

void lcd_print(char m[16], int n) {
    811c:	defffb04 	addi	sp,sp,-20
    8120:	dc800215 	stw	r18,8(sp)
    8124:	2025883a 	mov	r18,r4
	usleep(2000);
    8128:	0101f404 	movi	r4,2000
	ALT_CI_LCD(0,0x01);

	usleep(2000);
}

void lcd_print(char m[16], int n) {
    812c:	dcc00315 	stw	r19,12(sp)
    8130:	dfc00415 	stw	ra,16(sp)
    8134:	dc400115 	stw	r17,4(sp)
    8138:	dc000015 	stw	r16,0(sp)
    813c:	2827883a 	mov	r19,r5
	usleep(2000);
    8140:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x02);
    8144:	00800084 	movi	r2,2
    8148:	0085c032 	custom	0,r2,zero,r2

	usleep(2000);
    814c:	0101f404 	movi	r4,2000
    8150:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x01);
    8154:	00800044 	movi	r2,1
    8158:	0087c032 	custom	0,r3,zero,r2

	for(int i = 0; i < n; i++) {
    815c:	9021883a 	mov	r16,r18
		usleep(2000);
		ALT_CI_LCD(1,m[i]);
    8160:	1023883a 	mov	r17,r2
	ALT_CI_LCD(0,0x02);

	usleep(2000);
	ALT_CI_LCD(0,0x01);

	for(int i = 0; i < n; i++) {
    8164:	8485c83a 	sub	r2,r16,r18
		usleep(2000);
    8168:	0101f404 	movi	r4,2000
	ALT_CI_LCD(0,0x02);

	usleep(2000);
	ALT_CI_LCD(0,0x01);

	for(int i = 0; i < n; i++) {
    816c:	14c0050e 	bge	r2,r19,8184 <lcd_print+0x68>
		usleep(2000);
    8170:	00086f40 	call	86f4 <usleep>
		ALT_CI_LCD(1,m[i]);
    8174:	80800007 	ldb	r2,0(r16)
    8178:	8885c032 	custom	0,r2,r17,r2
    817c:	84000044 	addi	r16,r16,1
    8180:	003ff806 	br	8164 <_gp+0xffff75ac>
	}

	usleep(2000);
    8184:	00086f40 	call	86f4 <usleep>
	ALT_CI_LCD(0,0x00);
    8188:	0005c032 	custom	0,r2,zero,zero
}
    818c:	dfc00417 	ldw	ra,16(sp)
    8190:	dcc00317 	ldw	r19,12(sp)
    8194:	dc800217 	ldw	r18,8(sp)
    8198:	dc400117 	ldw	r17,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00504 	addi	sp,sp,20
    81a4:	f800283a 	ret

000081a8 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "lcd.h"
#include "uart.h"

int main() {
    81a8:	defffd04 	addi	sp,sp,-12
    81ac:	dc000015 	stw	r16,0(sp)
			estado = 0;
		}
	}
	*/

	uart_write(WIFI_MODE, 1); uart_read();
    81b0:	01000074 	movhi	r4,1
    81b4:	04000044 	movi	r16,1
    81b8:	800b883a 	mov	r5,r16
    81bc:	21228904 	addi	r4,r4,-30172
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "lcd.h"
#include "uart.h"

int main() {
    81c0:	dfc00215 	stw	ra,8(sp)
    81c4:	dc400115 	stw	r17,4(sp)
			estado = 0;
		}
	}
	*/

	uart_write(WIFI_MODE, 1); uart_read();
    81c8:	00082a80 	call	82a8 <uart_write>
    81cc:	000837c0 	call	837c <uart_read>
	uart_write(WIFI_CONNECT, 1); uart_read();
    81d0:	01000074 	movhi	r4,1
    81d4:	800b883a 	mov	r5,r16
    81d8:	21228c04 	addi	r4,r4,-30160
    81dc:	00082a80 	call	82a8 <uart_write>
    81e0:	000837c0 	call	837c <uart_read>

	uart_write(TCP_CONNECT, 1); uart_read();
    81e4:	01000074 	movhi	r4,1
    81e8:	800b883a 	mov	r5,r16
    81ec:	21229304 	addi	r4,r4,-30132
	usleep(100000);
    81f0:	044000b4 	movhi	r17,2
	*/

	uart_write(WIFI_MODE, 1); uart_read();
	uart_write(WIFI_CONNECT, 1); uart_read();

	uart_write(TCP_CONNECT, 1); uart_read();
    81f4:	00082a80 	call	82a8 <uart_write>
	usleep(100000);
    81f8:	8c61a804 	addi	r17,r17,-31072
	*/

	uart_write(WIFI_MODE, 1); uart_read();
	uart_write(WIFI_CONNECT, 1); uart_read();

	uart_write(TCP_CONNECT, 1); uart_read();
    81fc:	000837c0 	call	837c <uart_read>
	usleep(100000);
    8200:	8809883a 	mov	r4,r17
    8204:	00086f40 	call	86f4 <usleep>

	uart_write(MQTT_CONNECT_SIZE, 1); uart_write(MQTT_CONNECT, 0);
    8208:	01000074 	movhi	r4,1
    820c:	800b883a 	mov	r5,r16
    8210:	21229a04 	addi	r4,r4,-30104
    8214:	00082a80 	call	82a8 <uart_write>
    8218:	01000074 	movhi	r4,1
    821c:	000b883a 	mov	r5,zero
    8220:	2122a904 	addi	r4,r4,-30044
    8224:	00082a80 	call	82a8 <uart_write>
	usleep(100000);
    8228:	8809883a 	mov	r4,r17
    822c:	00086f40 	call	86f4 <usleep>

	uart_write(MESSAGE_SIZE, 1); uart_write(MESSAGE_0, 0);
    8230:	01000074 	movhi	r4,1
    8234:	800b883a 	mov	r5,r16
    8238:	21229e04 	addi	r4,r4,-30088
    823c:	00082a80 	call	82a8 <uart_write>
    8240:	01000074 	movhi	r4,1
    8244:	000b883a 	mov	r5,zero
    8248:	2122af04 	addi	r4,r4,-30020
    824c:	00082a80 	call	82a8 <uart_write>
	usleep(100000);
    8250:	8809883a 	mov	r4,r17
    8254:	00086f40 	call	86f4 <usleep>

	uart_write(MQTT_DISCONNECT_SIZE, 1); uart_write(MQTT_DISCONNECT, 0);
    8258:	01000074 	movhi	r4,1
    825c:	800b883a 	mov	r5,r16
    8260:	2122a204 	addi	r4,r4,-30072
    8264:	00082a80 	call	82a8 <uart_write>
    8268:	01000074 	movhi	r4,1
    826c:	000b883a 	mov	r5,zero
    8270:	2122b504 	addi	r4,r4,-29996
    8274:	00082a80 	call	82a8 <uart_write>
	usleep(100000);
    8278:	8809883a 	mov	r4,r17
    827c:	00086f40 	call	86f4 <usleep>

	uart_write(TCP_DISCONNECT, 1);
    8280:	01000074 	movhi	r4,1
    8284:	800b883a 	mov	r5,r16
    8288:	2122a604 	addi	r4,r4,-30056
    828c:	00082a80 	call	82a8 <uart_write>

	return 0;
}
    8290:	0005883a 	mov	r2,zero
    8294:	dfc00217 	ldw	ra,8(sp)
    8298:	dc400117 	ldw	r17,4(sp)
    829c:	dc000017 	ldw	r16,0(sp)
    82a0:	dec00304 	addi	sp,sp,12
    82a4:	f800283a 	ret

000082a8 <uart_write>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_jtag_uart_regs.h"
#include "altera_avalon_uart_regs.h"

void uart_write(char *d, int c) {
    82a8:	defffa04 	addi	sp,sp,-24
    82ac:	dcc00315 	stw	r19,12(sp)
    82b0:	dc800215 	stw	r18,8(sp)
    82b4:	dc400115 	stw	r17,4(sp)
    82b8:	dfc00515 	stw	ra,20(sp)
    82bc:	2023883a 	mov	r17,r4
    82c0:	dd000415 	stw	r20,16(sp)
    82c4:	dc000015 	stw	r16,0(sp)
    82c8:	2825883a 	mov	r18,r5
	int l = strlen(d);
    82cc:	00084100 	call	8410 <strlen>

    while(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) != 0x40);
    82d0:	01000074 	movhi	r4,1
#include "system.h"
#include "altera_avalon_jtag_uart_regs.h"
#include "altera_avalon_uart_regs.h"

void uart_write(char *d, int c) {
	int l = strlen(d);
    82d4:	1027883a 	mov	r19,r2

    while(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) != 0x40);
    82d8:	21040204 	addi	r4,r4,4104
    82dc:	00801004 	movi	r2,64
    82e0:	20c00037 	ldwio	r3,0(r4)
    82e4:	18bffe1e 	bne	r3,r2,82e0 <_gp+0xffff7728>

    for (int i = 0; i < l; i++) {
    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, d[i]);
    82e8:	05000074 	movhi	r20,1
#include "altera_avalon_uart_regs.h"

void uart_write(char *d, int c) {
	int l = strlen(d);

    while(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) != 0x40);
    82ec:	8821883a 	mov	r16,r17

    for (int i = 0; i < l; i++) {
    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, d[i]);
    82f0:	a5040104 	addi	r20,r20,4100
void uart_write(char *d, int c) {
	int l = strlen(d);

    while(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) != 0x40);

    for (int i = 0; i < l; i++) {
    82f4:	8445c83a 	sub	r2,r16,r17
    82f8:	14c0060e 	bge	r2,r19,8314 <uart_write+0x6c>
    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, d[i]);
    82fc:	80800007 	ldb	r2,0(r16)
    8300:	a0800035 	stwio	r2,0(r20)
    	usleep(1000);
    8304:	0100fa04 	movi	r4,1000
    8308:	00086f40 	call	86f4 <usleep>
    830c:	84000044 	addi	r16,r16,1
    8310:	003ff806 	br	82f4 <_gp+0xffff773c>
    }

    if(c) {
    8314:	90001126 	beq	r18,zero,835c <uart_write+0xb4>
    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, '\r');
    8318:	04000074 	movhi	r16,1
    831c:	84040104 	addi	r16,r16,4100
    8320:	00800344 	movi	r2,13
    8324:	80800035 	stwio	r2,0(r16)
    	usleep(1000);
    8328:	0100fa04 	movi	r4,1000
    832c:	00086f40 	call	86f4 <usleep>

    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, '\n');
    8330:	00800284 	movi	r2,10
    8334:	80800035 	stwio	r2,0(r16)
    	usleep(1000);
    8338:	0100fa04 	movi	r4,1000
    }
}
    833c:	dfc00517 	ldw	ra,20(sp)
    8340:	dd000417 	ldw	r20,16(sp)
    8344:	dcc00317 	ldw	r19,12(sp)
    8348:	dc800217 	ldw	r18,8(sp)
    834c:	dc400117 	ldw	r17,4(sp)
    8350:	dc000017 	ldw	r16,0(sp)
    8354:	dec00604 	addi	sp,sp,24
    if(c) {
    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, '\r');
    	usleep(1000);

    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, '\n');
    	usleep(1000);
    8358:	00086f41 	jmpi	86f4 <usleep>
    }
}
    835c:	dfc00517 	ldw	ra,20(sp)
    8360:	dd000417 	ldw	r20,16(sp)
    8364:	dcc00317 	ldw	r19,12(sp)
    8368:	dc800217 	ldw	r18,8(sp)
    836c:	dc400117 	ldw	r17,4(sp)
    8370:	dc000017 	ldw	r16,0(sp)
    8374:	dec00604 	addi	sp,sp,24
    8378:	f800283a 	ret

0000837c <uart_read>:

void uart_read() {
    837c:	defffb04 	addi	sp,sp,-20
    8380:	dcc00315 	stw	r19,12(sp)
    8384:	dc800215 	stw	r18,8(sp)
	char d;

    while(1) {
    	if(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) & 0x80) {
    8388:	04c00074 	movhi	r19,1
    		d = IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    838c:	04800074 	movhi	r18,1
    	IOWR_ALTERA_AVALON_UART_TXDATA(RS232_BASE, '\n');
    	usleep(1000);
    }
}

void uart_read() {
    8390:	dc400115 	stw	r17,4(sp)
    8394:	dfc00415 	stw	ra,16(sp)
    8398:	dc000015 	stw	r16,0(sp)
	char d;

    while(1) {
    	if(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) & 0x80) {
    839c:	9cc40204 	addi	r19,r19,4104
    		d = IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    83a0:	94840004 	addi	r18,r18,4096
	        printf("%c", d);

	        if(d == 'K') return;
    83a4:	044012c4 	movi	r17,75

void uart_read() {
	char d;

    while(1) {
    	if(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) & 0x80) {
    83a8:	98800037 	ldwio	r2,0(r19)
    83ac:	1080200c 	andi	r2,r2,128
    83b0:	103ffd26 	beq	r2,zero,83a8 <_gp+0xffff77f0>
    		d = IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    83b4:	94000037 	ldwio	r16,0(r18)
	        printf("%c", d);
    83b8:	84003fcc 	andi	r16,r16,255
    83bc:	8400201c 	xori	r16,r16,128
    83c0:	843fe004 	addi	r16,r16,-128
    83c4:	8009883a 	mov	r4,r16
    83c8:	00083f40 	call	83f4 <putchar>

	        if(d == 'K') return;
    83cc:	847ff61e 	bne	r16,r17,83a8 <_gp+0xffff77f0>
    	}
	}
}
    83d0:	dfc00417 	ldw	ra,16(sp)
    83d4:	dcc00317 	ldw	r19,12(sp)
    83d8:	dc800217 	ldw	r18,8(sp)
    83dc:	dc400117 	ldw	r17,4(sp)
    83e0:	dc000017 	ldw	r16,0(sp)
    83e4:	dec00504 	addi	sp,sp,20
    83e8:	f800283a 	ret

000083ec <_putchar_r>:
    83ec:	21800217 	ldw	r6,8(r4)
    83f0:	00084801 	jmpi	8480 <_putc_r>

000083f4 <putchar>:
    83f4:	00800074 	movhi	r2,1
    83f8:	10a2ef04 	addi	r2,r2,-29764
    83fc:	10800017 	ldw	r2,0(r2)
    8400:	200b883a 	mov	r5,r4
    8404:	11800217 	ldw	r6,8(r2)
    8408:	1009883a 	mov	r4,r2
    840c:	00084801 	jmpi	8480 <_putc_r>

00008410 <strlen>:
    8410:	2005883a 	mov	r2,r4
    8414:	10c00007 	ldb	r3,0(r2)
    8418:	18000226 	beq	r3,zero,8424 <strlen+0x14>
    841c:	10800044 	addi	r2,r2,1
    8420:	003ffc06 	br	8414 <_gp+0xffff785c>
    8424:	1105c83a 	sub	r2,r2,r4
    8428:	f800283a 	ret

0000842c <putc>:
    842c:	defffd04 	addi	sp,sp,-12
    8430:	00800074 	movhi	r2,1
    8434:	dc000115 	stw	r16,4(sp)
    8438:	dfc00215 	stw	ra,8(sp)
    843c:	10a13604 	addi	r2,r2,-31528
    8440:	28800115 	stw	r2,4(r5)
    8444:	00800074 	movhi	r2,1
    8448:	10a2ef04 	addi	r2,r2,-29764
    844c:	d9000005 	stb	r4,0(sp)
    8450:	2021883a 	mov	r16,r4
    8454:	11000017 	ldw	r4,0(r2)
    8458:	01c00044 	movi	r7,1
    845c:	d80d883a 	mov	r6,sp
    8460:	00084d80 	call	84d8 <__sfvwrite_small_dev>
    8464:	00ffffc4 	movi	r3,-1
    8468:	10c00126 	beq	r2,r3,8470 <putc+0x44>
    846c:	8005883a 	mov	r2,r16
    8470:	dfc00217 	ldw	ra,8(sp)
    8474:	dc000117 	ldw	r16,4(sp)
    8478:	dec00304 	addi	sp,sp,12
    847c:	f800283a 	ret

00008480 <_putc_r>:
    8480:	defffd04 	addi	sp,sp,-12
    8484:	00800074 	movhi	r2,1
    8488:	dc000115 	stw	r16,4(sp)
    848c:	dfc00215 	stw	ra,8(sp)
    8490:	10a13604 	addi	r2,r2,-31528
    8494:	30800115 	stw	r2,4(r6)
    8498:	00800074 	movhi	r2,1
    849c:	10a2ef04 	addi	r2,r2,-29764
    84a0:	11000017 	ldw	r4,0(r2)
    84a4:	2821883a 	mov	r16,r5
    84a8:	01c00044 	movi	r7,1
    84ac:	300b883a 	mov	r5,r6
    84b0:	d80d883a 	mov	r6,sp
    84b4:	dc000005 	stb	r16,0(sp)
    84b8:	00084d80 	call	84d8 <__sfvwrite_small_dev>
    84bc:	00ffffc4 	movi	r3,-1
    84c0:	10c00126 	beq	r2,r3,84c8 <_putc_r+0x48>
    84c4:	8005883a 	mov	r2,r16
    84c8:	dfc00217 	ldw	ra,8(sp)
    84cc:	dc000117 	ldw	r16,4(sp)
    84d0:	dec00304 	addi	sp,sp,12
    84d4:	f800283a 	ret

000084d8 <__sfvwrite_small_dev>:
    84d8:	2880000b 	ldhu	r2,0(r5)
    84dc:	1080020c 	andi	r2,r2,8
    84e0:	10002126 	beq	r2,zero,8568 <__sfvwrite_small_dev+0x90>
    84e4:	2880008f 	ldh	r2,2(r5)
    84e8:	defffa04 	addi	sp,sp,-24
    84ec:	dc000015 	stw	r16,0(sp)
    84f0:	dfc00515 	stw	ra,20(sp)
    84f4:	dd000415 	stw	r20,16(sp)
    84f8:	dcc00315 	stw	r19,12(sp)
    84fc:	dc800215 	stw	r18,8(sp)
    8500:	dc400115 	stw	r17,4(sp)
    8504:	2821883a 	mov	r16,r5
    8508:	10001216 	blt	r2,zero,8554 <__sfvwrite_small_dev+0x7c>
    850c:	2027883a 	mov	r19,r4
    8510:	3025883a 	mov	r18,r6
    8514:	3823883a 	mov	r17,r7
    8518:	05010004 	movi	r20,1024
    851c:	04400b0e 	bge	zero,r17,854c <__sfvwrite_small_dev+0x74>
    8520:	880f883a 	mov	r7,r17
    8524:	a440010e 	bge	r20,r17,852c <__sfvwrite_small_dev+0x54>
    8528:	01c10004 	movi	r7,1024
    852c:	8140008f 	ldh	r5,2(r16)
    8530:	900d883a 	mov	r6,r18
    8534:	9809883a 	mov	r4,r19
    8538:	00085900 	call	8590 <_write_r>
    853c:	0080050e 	bge	zero,r2,8554 <__sfvwrite_small_dev+0x7c>
    8540:	88a3c83a 	sub	r17,r17,r2
    8544:	90a5883a 	add	r18,r18,r2
    8548:	003ff406 	br	851c <_gp+0xffff7964>
    854c:	0005883a 	mov	r2,zero
    8550:	00000706 	br	8570 <__sfvwrite_small_dev+0x98>
    8554:	8080000b 	ldhu	r2,0(r16)
    8558:	10801014 	ori	r2,r2,64
    855c:	8080000d 	sth	r2,0(r16)
    8560:	00bfffc4 	movi	r2,-1
    8564:	00000206 	br	8570 <__sfvwrite_small_dev+0x98>
    8568:	00bfffc4 	movi	r2,-1
    856c:	f800283a 	ret
    8570:	dfc00517 	ldw	ra,20(sp)
    8574:	dd000417 	ldw	r20,16(sp)
    8578:	dcc00317 	ldw	r19,12(sp)
    857c:	dc800217 	ldw	r18,8(sp)
    8580:	dc400117 	ldw	r17,4(sp)
    8584:	dc000017 	ldw	r16,0(sp)
    8588:	dec00604 	addi	sp,sp,24
    858c:	f800283a 	ret

00008590 <_write_r>:
    8590:	defffd04 	addi	sp,sp,-12
    8594:	dc000015 	stw	r16,0(sp)
    8598:	04000074 	movhi	r16,1
    859c:	dc400115 	stw	r17,4(sp)
    85a0:	84233004 	addi	r16,r16,-29504
    85a4:	2023883a 	mov	r17,r4
    85a8:	2809883a 	mov	r4,r5
    85ac:	300b883a 	mov	r5,r6
    85b0:	380d883a 	mov	r6,r7
    85b4:	dfc00215 	stw	ra,8(sp)
    85b8:	80000015 	stw	zero,0(r16)
    85bc:	00086f80 	call	86f8 <write>
    85c0:	00ffffc4 	movi	r3,-1
    85c4:	10c0031e 	bne	r2,r3,85d4 <_write_r+0x44>
    85c8:	80c00017 	ldw	r3,0(r16)
    85cc:	18000126 	beq	r3,zero,85d4 <_write_r+0x44>
    85d0:	88c00015 	stw	r3,0(r17)
    85d4:	dfc00217 	ldw	ra,8(sp)
    85d8:	dc400117 	ldw	r17,4(sp)
    85dc:	dc000017 	ldw	r16,0(sp)
    85e0:	dec00304 	addi	sp,sp,12
    85e4:	f800283a 	ret

000085e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    85e8:	deffff04 	addi	sp,sp,-4
    85ec:	01000074 	movhi	r4,1
    85f0:	01400074 	movhi	r5,1
    85f4:	dfc00015 	stw	ra,0(sp)
    85f8:	2122b604 	addi	r4,r4,-29992
    85fc:	2962f304 	addi	r5,r5,-29748

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8600:	2140061e 	bne	r4,r5,861c <alt_load+0x34>
    8604:	01000074 	movhi	r4,1
    8608:	01400074 	movhi	r5,1
    860c:	21200804 	addi	r4,r4,-32736
    8610:	29600804 	addi	r5,r5,-32736
    8614:	2140121e 	bne	r4,r5,8660 <alt_load+0x78>
    8618:	00000b06 	br	8648 <alt_load+0x60>
    861c:	00c00074 	movhi	r3,1
    8620:	18e2f304 	addi	r3,r3,-29748
    8624:	1907c83a 	sub	r3,r3,r4
    8628:	0005883a 	mov	r2,zero
  {
    while( to != end )
    862c:	10fff526 	beq	r2,r3,8604 <_gp+0xffff7a4c>
    {
      *to++ = *from++;
    8630:	114f883a 	add	r7,r2,r5
    8634:	39c00017 	ldw	r7,0(r7)
    8638:	110d883a 	add	r6,r2,r4
    863c:	10800104 	addi	r2,r2,4
    8640:	31c00015 	stw	r7,0(r6)
    8644:	003ff906 	br	862c <_gp+0xffff7a74>
    8648:	01000074 	movhi	r4,1
    864c:	01400074 	movhi	r5,1
    8650:	21228904 	addi	r4,r4,-30172
    8654:	29628904 	addi	r5,r5,-30172

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8658:	2140101e 	bne	r4,r5,869c <alt_load+0xb4>
    865c:	00000b06 	br	868c <alt_load+0xa4>
    8660:	00c00074 	movhi	r3,1
    8664:	18e00804 	addi	r3,r3,-32736
    8668:	1907c83a 	sub	r3,r3,r4
    866c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8670:	10fff526 	beq	r2,r3,8648 <_gp+0xffff7a90>
    {
      *to++ = *from++;
    8674:	114f883a 	add	r7,r2,r5
    8678:	39c00017 	ldw	r7,0(r7)
    867c:	110d883a 	add	r6,r2,r4
    8680:	10800104 	addi	r2,r2,4
    8684:	31c00015 	stw	r7,0(r6)
    8688:	003ff906 	br	8670 <_gp+0xffff7ab8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    868c:	00088380 	call	8838 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8690:	dfc00017 	ldw	ra,0(sp)
    8694:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8698:	000883c1 	jmpi	883c <alt_icache_flush_all>
    869c:	00c00074 	movhi	r3,1
    86a0:	18e2b604 	addi	r3,r3,-29992
    86a4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    86a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    86ac:	18bff726 	beq	r3,r2,868c <_gp+0xffff7ad4>
    {
      *to++ = *from++;
    86b0:	114f883a 	add	r7,r2,r5
    86b4:	39c00017 	ldw	r7,0(r7)
    86b8:	110d883a 	add	r6,r2,r4
    86bc:	10800104 	addi	r2,r2,4
    86c0:	31c00015 	stw	r7,0(r6)
    86c4:	003ff906 	br	86ac <_gp+0xffff7af4>

000086c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    86c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    86cc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    86d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    86d4:	00087580 	call	8758 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    86d8:	00087780 	call	8778 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    86dc:	d1a04317 	ldw	r6,-32500(gp)
    86e0:	d1604417 	ldw	r5,-32496(gp)
    86e4:	d1204517 	ldw	r4,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    86e8:	dfc00017 	ldw	ra,0(sp)
    86ec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    86f0:	00081a81 	jmpi	81a8 <main>

000086f4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    86f4:	00087b01 	jmpi	87b0 <alt_busy_sleep>

000086f8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    86f8:	00800044 	movi	r2,1
    86fc:	20800226 	beq	r4,r2,8708 <write+0x10>
    8700:	00800084 	movi	r2,2
    8704:	2080041e 	bne	r4,r2,8718 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8708:	01000074 	movhi	r4,1
    870c:	000f883a 	mov	r7,zero
    8710:	2122f104 	addi	r4,r4,-29756
    8714:	000877c1 	jmpi	877c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8718:	d0a00417 	ldw	r2,-32752(gp)
    871c:	10000926 	beq	r2,zero,8744 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8720:	deffff04 	addi	sp,sp,-4
    8724:	dfc00015 	stw	ra,0(sp)
    8728:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    872c:	00c01444 	movi	r3,81
    8730:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8734:	00bfffc4 	movi	r2,-1
    8738:	dfc00017 	ldw	ra,0(sp)
    873c:	dec00104 	addi	sp,sp,4
    8740:	f800283a 	ret
    8744:	d0a04204 	addi	r2,gp,-32504
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8748:	00c01444 	movi	r3,81
    874c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8750:	00bfffc4 	movi	r2,-1
    8754:	f800283a 	ret

00008758 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8758:	deffff04 	addi	sp,sp,-4
    875c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    8760:	00088400 	call	8840 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8764:	00800044 	movi	r2,1
    8768:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    876c:	dfc00017 	ldw	ra,0(sp)
    8770:	dec00104 	addi	sp,sp,4
    8774:	f800283a 	ret

00008778 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8778:	f800283a 	ret

0000877c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    877c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8780:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8784:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8788:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    878c:	2980072e 	bgeu	r5,r6,87ac <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8790:	38c00037 	ldwio	r3,0(r7)
    8794:	18ffffec 	andhi	r3,r3,65535
    8798:	183ffc26 	beq	r3,zero,878c <_gp+0xffff7bd4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    879c:	28c00007 	ldb	r3,0(r5)
    87a0:	20c00035 	stwio	r3,0(r4)
    87a4:	29400044 	addi	r5,r5,1
    87a8:	003ff806 	br	878c <_gp+0xffff7bd4>

  return count;
}
    87ac:	f800283a 	ret

000087b0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    87b0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    87b4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    87b8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    87bc:	dc000015 	stw	r16,0(sp)
    87c0:	dfc00115 	stw	ra,4(sp)
    87c4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    87c8:	00089400 	call	8940 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    87cc:	10001026 	beq	r2,zero,8810 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    87d0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    87d4:	013999b4 	movhi	r4,58982
    87d8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    87dc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    87e0:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    87e4:	297fffc4 	addi	r5,r5,-1
    87e8:	283ffe1e 	bne	r5,zero,87e4 <_gp+0xffff7c2c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    87ec:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    87f0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    87f4:	18bffb16 	blt	r3,r2,87e4 <_gp+0xffff7c2c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    87f8:	01400144 	movi	r5,5
    87fc:	8009883a 	mov	r4,r16
    8800:	00089fc0 	call	89fc <__mulsi3>
    8804:	10bfffc4 	addi	r2,r2,-1
    8808:	103ffe1e 	bne	r2,zero,8804 <_gp+0xffff7c4c>
    880c:	00000506 	br	8824 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8810:	01400144 	movi	r5,5
    8814:	8009883a 	mov	r4,r16
    8818:	00089fc0 	call	89fc <__mulsi3>
    881c:	10bfffc4 	addi	r2,r2,-1
    8820:	00bffe16 	blt	zero,r2,881c <_gp+0xffff7c64>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8824:	0005883a 	mov	r2,zero
    8828:	dfc00117 	ldw	ra,4(sp)
    882c:	dc000017 	ldw	r16,0(sp)
    8830:	dec00204 	addi	sp,sp,8
    8834:	f800283a 	ret

00008838 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8838:	f800283a 	ret

0000883c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    883c:	f800283a 	ret

00008840 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8840:	000170fa 	wrctl	ienable,zero
    8844:	f800283a 	ret

00008848 <__divsi3>:
    8848:	20001b16 	blt	r4,zero,88b8 <__divsi3+0x70>
    884c:	000f883a 	mov	r7,zero
    8850:	28001616 	blt	r5,zero,88ac <__divsi3+0x64>
    8854:	200d883a 	mov	r6,r4
    8858:	29001a2e 	bgeu	r5,r4,88c4 <__divsi3+0x7c>
    885c:	00800804 	movi	r2,32
    8860:	00c00044 	movi	r3,1
    8864:	00000106 	br	886c <__divsi3+0x24>
    8868:	10000d26 	beq	r2,zero,88a0 <__divsi3+0x58>
    886c:	294b883a 	add	r5,r5,r5
    8870:	10bfffc4 	addi	r2,r2,-1
    8874:	18c7883a 	add	r3,r3,r3
    8878:	293ffb36 	bltu	r5,r4,8868 <_gp+0xffff7cb0>
    887c:	0005883a 	mov	r2,zero
    8880:	18000726 	beq	r3,zero,88a0 <__divsi3+0x58>
    8884:	0005883a 	mov	r2,zero
    8888:	31400236 	bltu	r6,r5,8894 <__divsi3+0x4c>
    888c:	314dc83a 	sub	r6,r6,r5
    8890:	10c4b03a 	or	r2,r2,r3
    8894:	1806d07a 	srli	r3,r3,1
    8898:	280ad07a 	srli	r5,r5,1
    889c:	183ffa1e 	bne	r3,zero,8888 <_gp+0xffff7cd0>
    88a0:	38000126 	beq	r7,zero,88a8 <__divsi3+0x60>
    88a4:	0085c83a 	sub	r2,zero,r2
    88a8:	f800283a 	ret
    88ac:	014bc83a 	sub	r5,zero,r5
    88b0:	39c0005c 	xori	r7,r7,1
    88b4:	003fe706 	br	8854 <_gp+0xffff7c9c>
    88b8:	0109c83a 	sub	r4,zero,r4
    88bc:	01c00044 	movi	r7,1
    88c0:	003fe306 	br	8850 <_gp+0xffff7c98>
    88c4:	00c00044 	movi	r3,1
    88c8:	003fee06 	br	8884 <_gp+0xffff7ccc>

000088cc <__modsi3>:
    88cc:	20001716 	blt	r4,zero,892c <__modsi3+0x60>
    88d0:	000f883a 	mov	r7,zero
    88d4:	2005883a 	mov	r2,r4
    88d8:	28001216 	blt	r5,zero,8924 <__modsi3+0x58>
    88dc:	2900162e 	bgeu	r5,r4,8938 <__modsi3+0x6c>
    88e0:	01800804 	movi	r6,32
    88e4:	00c00044 	movi	r3,1
    88e8:	00000106 	br	88f0 <__modsi3+0x24>
    88ec:	30000a26 	beq	r6,zero,8918 <__modsi3+0x4c>
    88f0:	294b883a 	add	r5,r5,r5
    88f4:	31bfffc4 	addi	r6,r6,-1
    88f8:	18c7883a 	add	r3,r3,r3
    88fc:	293ffb36 	bltu	r5,r4,88ec <_gp+0xffff7d34>
    8900:	18000526 	beq	r3,zero,8918 <__modsi3+0x4c>
    8904:	1806d07a 	srli	r3,r3,1
    8908:	11400136 	bltu	r2,r5,8910 <__modsi3+0x44>
    890c:	1145c83a 	sub	r2,r2,r5
    8910:	280ad07a 	srli	r5,r5,1
    8914:	183ffb1e 	bne	r3,zero,8904 <_gp+0xffff7d4c>
    8918:	38000126 	beq	r7,zero,8920 <__modsi3+0x54>
    891c:	0085c83a 	sub	r2,zero,r2
    8920:	f800283a 	ret
    8924:	014bc83a 	sub	r5,zero,r5
    8928:	003fec06 	br	88dc <_gp+0xffff7d24>
    892c:	0109c83a 	sub	r4,zero,r4
    8930:	01c00044 	movi	r7,1
    8934:	003fe706 	br	88d4 <_gp+0xffff7d1c>
    8938:	00c00044 	movi	r3,1
    893c:	003ff106 	br	8904 <_gp+0xffff7d4c>

00008940 <__udivsi3>:
    8940:	200d883a 	mov	r6,r4
    8944:	2900152e 	bgeu	r5,r4,899c <__udivsi3+0x5c>
    8948:	28001416 	blt	r5,zero,899c <__udivsi3+0x5c>
    894c:	00800804 	movi	r2,32
    8950:	00c00044 	movi	r3,1
    8954:	00000206 	br	8960 <__udivsi3+0x20>
    8958:	10000e26 	beq	r2,zero,8994 <__udivsi3+0x54>
    895c:	28000516 	blt	r5,zero,8974 <__udivsi3+0x34>
    8960:	294b883a 	add	r5,r5,r5
    8964:	10bfffc4 	addi	r2,r2,-1
    8968:	18c7883a 	add	r3,r3,r3
    896c:	293ffa36 	bltu	r5,r4,8958 <_gp+0xffff7da0>
    8970:	18000826 	beq	r3,zero,8994 <__udivsi3+0x54>
    8974:	0005883a 	mov	r2,zero
    8978:	31400236 	bltu	r6,r5,8984 <__udivsi3+0x44>
    897c:	314dc83a 	sub	r6,r6,r5
    8980:	10c4b03a 	or	r2,r2,r3
    8984:	1806d07a 	srli	r3,r3,1
    8988:	280ad07a 	srli	r5,r5,1
    898c:	183ffa1e 	bne	r3,zero,8978 <_gp+0xffff7dc0>
    8990:	f800283a 	ret
    8994:	0005883a 	mov	r2,zero
    8998:	f800283a 	ret
    899c:	00c00044 	movi	r3,1
    89a0:	003ff406 	br	8974 <_gp+0xffff7dbc>

000089a4 <__umodsi3>:
    89a4:	2005883a 	mov	r2,r4
    89a8:	2900122e 	bgeu	r5,r4,89f4 <__umodsi3+0x50>
    89ac:	28001116 	blt	r5,zero,89f4 <__umodsi3+0x50>
    89b0:	01800804 	movi	r6,32
    89b4:	00c00044 	movi	r3,1
    89b8:	00000206 	br	89c4 <__umodsi3+0x20>
    89bc:	30000c26 	beq	r6,zero,89f0 <__umodsi3+0x4c>
    89c0:	28000516 	blt	r5,zero,89d8 <__umodsi3+0x34>
    89c4:	294b883a 	add	r5,r5,r5
    89c8:	31bfffc4 	addi	r6,r6,-1
    89cc:	18c7883a 	add	r3,r3,r3
    89d0:	293ffa36 	bltu	r5,r4,89bc <_gp+0xffff7e04>
    89d4:	18000626 	beq	r3,zero,89f0 <__umodsi3+0x4c>
    89d8:	1806d07a 	srli	r3,r3,1
    89dc:	11400136 	bltu	r2,r5,89e4 <__umodsi3+0x40>
    89e0:	1145c83a 	sub	r2,r2,r5
    89e4:	280ad07a 	srli	r5,r5,1
    89e8:	183ffb1e 	bne	r3,zero,89d8 <_gp+0xffff7e20>
    89ec:	f800283a 	ret
    89f0:	f800283a 	ret
    89f4:	00c00044 	movi	r3,1
    89f8:	003ff706 	br	89d8 <_gp+0xffff7e20>

000089fc <__mulsi3>:
    89fc:	0005883a 	mov	r2,zero
    8a00:	20000726 	beq	r4,zero,8a20 <__mulsi3+0x24>
    8a04:	20c0004c 	andi	r3,r4,1
    8a08:	2008d07a 	srli	r4,r4,1
    8a0c:	18000126 	beq	r3,zero,8a14 <__mulsi3+0x18>
    8a10:	1145883a 	add	r2,r2,r5
    8a14:	294b883a 	add	r5,r5,r5
    8a18:	203ffa1e 	bne	r4,zero,8a04 <_gp+0xffff7e4c>
    8a1c:	f800283a 	ret
    8a20:	f800283a 	ret
