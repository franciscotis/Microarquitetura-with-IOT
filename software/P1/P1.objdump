
P1.elf:     file format elf32-littlenios2
P1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000b9c memsz 0x00000b9c flags r-x
    LOAD off    0x00001bbc vaddr 0x00008bbc paddr 0x00008d9c align 2**12
         filesz 0x000001e0 memsz 0x000001e0 flags rw-
    LOAD off    0x00001f7c vaddr 0x00008f7c paddr 0x00008f7c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001d9c  2**0
                  CONTENTS
  2 .text         00000b0c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000090  00008b2c  00008b2c  00001b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001e0  00008bbc  00008d9c  00001bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008f7c  00008f7c  00001f7c  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00008f8c  00008f8c  00001d9c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e0  00000000  00000000  00001dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003652  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000133f  00000000  00000000  000056f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001570  00000000  00000000  00006a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003ec  00000000  00000000  00007fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d8e  00000000  00000000  00008390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c2c  00000000  00000000  0000911e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00009d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00009d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b062  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000b065  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b06a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b06b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 26 .jdi          00004835  00000000  00000000  0000b0bb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000435e7  00000000  00000000  0000f8f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008b2c l    d  .rodata	00000000 .rodata
00008bbc l    d  .rwdata	00000000 .rwdata
00008f7c l    d  .bss	00000000 .bss
00008f8c l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../P1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 impure.c
00008ca4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008540 g     F .text	0000001c putchar
000087f8 g     F .text	0000002c alt_main
00008d9c g       *ABS*	00000000 __flash_rwdata_start
00008c78 g     O .rwdata	00000016 MESSAGE_0
00008970 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008f7c g     O .bss	00000004 errno
00008f84 g     O .bss	00000004 alt_argv
00010d84 g       *ABS*	00000000 _gp
00008824 g     F .text	00000004 usleep
00008d94 g     O .rwdata	00000004 jtag
0000845c g     F .text	000000b4 uart_write
00008538 g     F .text	00000008 _putchar_r
00008a70 g     F .text	00000064 .hidden __udivsi3
00008c8e g     O .rwdata	00000015 MQTT_CONNECT
00008c4c g     O .rwdata	00000016 MESSAGE_2
00008bbc g     O .rwdata	0000003c msg
00008d88 g     O .rwdata	00000004 _global_impure_ptr
00008f8c g       *ABS*	00000000 __bss_end
00008968 g     F .text	00000004 alt_dcache_flush_all
00008d9c g       *ABS*	00000000 __ram_rwdata_end
00008828 g     F .text	00000060 write
000085b0 g     F .text	00000058 _putc_r
00008bbc g       *ABS*	00000000 __ram_rodata_end
00008ad4 g     F .text	00000058 .hidden __umodsi3
00008f8c g       *ABS*	00000000 end
0000e000 g       *ABS*	00000000 __alt_stack_pointer
000088ac g     F .text	00000034 altera_avalon_jtag_uart_write
00008c36 g     O .rwdata	00000016 MESSAGE_3
00008020 g     F .text	0000003c _start
00008bf8 g     O .rwdata	00000028 opt
000088a8 g     F .text	00000004 alt_sys_init
00008110 g     F .text	00000078 lcd_print
00008510 g     F .text	00000028 .hidden __mulsi3
00008bbc g       *ABS*	00000000 __ram_rwdata_start
00008b2c g       *ABS*	00000000 __ram_rodata_start
000088e0 g     F .text	00000088 alt_busy_sleep
00008c20 g     O .rwdata	00000016 MESSAGE_4
00008f8c g       *ABS*	00000000 __alt_stack_base
00008c62 g     O .rwdata	00000016 MESSAGE_1
00008d84 g     O .rwdata	00000003 MQTT_DISCONNECT
00008608 g     F .text	000000b8 __sfvwrite_small_dev
00008f7c g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000b4 lcd_init
00008188 g     F .text	000002d4 main
00008f80 g     O .bss	00000004 alt_envp
00008d98 g     O .rwdata	00000004 alt_errno
0000855c g     F .text	00000054 putc
00008978 g     F .text	00000084 .hidden __divsi3
00008b2c g       *ABS*	00000000 __flash_rodata_start
00008888 g     F .text	00000020 alt_irq_init
000086c0 g     F .text	00000058 _write_r
00008d8c g     O .rwdata	00000004 _impure_ptr
00008f88 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008d9c g       *ABS*	00000000 _edata
00008f8c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
000089fc g     F .text	00000074 .hidden __modsi3
0000e000 g       *ABS*	00000000 __alt_data_end
00008d90 g     O .rwdata	00000004 uart
0000800c g       .entry	00000000 _exit
0000896c g     F .text	00000004 alt_icache_flush_all
00008718 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6836114 	ori	gp,gp,3460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3df14 	ori	r2,r2,36732

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3e314 	ori	r3,r3,36748

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff72c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00087180 	call	8718 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00087f80 	call	87f8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff72d4>

0000805c <lcd_init>:
#include <unistd.h>
#include "system.h"

void lcd_init() {
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dc800215 	stw	r18,8(sp)
    8064:	dc000015 	stw	r16,0(sp)
	ALT_CI_LCD(0,0x38);
    8068:	04800e04 	movi	r18,56
    806c:	0021883a 	mov	r16,zero
#include <unistd.h>
#include "system.h"

void lcd_init() {
    8070:	dfc00315 	stw	ra,12(sp)
    8074:	dc400115 	stw	r17,4(sp)
	ALT_CI_LCD(0,0x38);
    8078:	8485c032 	custom	0,r2,r16,r18
	usleep(15000);
    807c:	010ea604 	movi	r4,15000
    8080:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x38);
    8084:	8485c032 	custom	0,r2,r16,r18
	usleep(4100);
    8088:	01040104 	movi	r4,4100
    808c:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x38);
    8090:	8485c032 	custom	0,r2,r16,r18
	usleep(100);
    8094:	04401904 	movi	r17,100
    8098:	8809883a 	mov	r4,r17
    809c:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x38);
    80a0:	84a5c032 	custom	0,r18,r16,r18
	usleep(5000);
    80a4:	0104e204 	movi	r4,5000
    80a8:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x08);
    80ac:	00800204 	movi	r2,8
    80b0:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    80b4:	8809883a 	mov	r4,r17
    80b8:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x0C);
    80bc:	00800304 	movi	r2,12
    80c0:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    80c4:	8809883a 	mov	r4,r17
    80c8:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x06);
    80cc:	00800184 	movi	r2,6
    80d0:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    80d4:	8809883a 	mov	r4,r17
    80d8:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x02);
    80dc:	00800084 	movi	r2,2
    80e0:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    80e4:	8809883a 	mov	r4,r17
    80e8:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x01);
    80ec:	00800044 	movi	r2,1
    80f0:	80a1c032 	custom	0,r16,r16,r2
	usleep(2000);
    80f4:	0101f404 	movi	r4,2000
}
    80f8:	dfc00317 	ldw	ra,12(sp)
    80fc:	dc800217 	ldw	r18,8(sp)
    8100:	dc400117 	ldw	r17,4(sp)
    8104:	dc000017 	ldw	r16,0(sp)
    8108:	dec00404 	addi	sp,sp,16

	ALT_CI_LCD(0,0x02);
	usleep(100);

	ALT_CI_LCD(0,0x01);
	usleep(2000);
    810c:	00088241 	jmpi	8824 <usleep>

00008110 <lcd_print>:
}

void lcd_print(char *m) {
    8110:	defffc04 	addi	sp,sp,-16
    8114:	dc400115 	stw	r17,4(sp)
	char *p = m;

	ALT_CI_LCD(0,0x02);
    8118:	00800084 	movi	r2,2

	ALT_CI_LCD(0,0x01);
	usleep(2000);
}

void lcd_print(char *m) {
    811c:	2023883a 	mov	r17,r4
    8120:	dfc00315 	stw	ra,12(sp)
    8124:	dc800215 	stw	r18,8(sp)
    8128:	dc000015 	stw	r16,0(sp)
	char *p = m;

	ALT_CI_LCD(0,0x02);
    812c:	0085c032 	custom	0,r2,zero,r2
	usleep(2000);
    8130:	0101f404 	movi	r4,2000
    8134:	00088240 	call	8824 <usleep>

	ALT_CI_LCD(0,0x01);
    8138:	04000044 	movi	r16,1
    813c:	0405c032 	custom	0,r2,zero,r16
	usleep(2000);
    8140:	0101f404 	movi	r4,2000
    8144:	00088240 	call	8824 <usleep>

	while(*p != '\n') {
    8148:	04800284 	movi	r18,10
    814c:	88800007 	ldb	r2,0(r17)
    8150:	14800526 	beq	r2,r18,8168 <lcd_print+0x58>
		ALT_CI_LCD(1, *p);
    8154:	8085c032 	custom	0,r2,r16,r2
		p++;
		usleep(2000);
    8158:	0101f404 	movi	r4,2000
	ALT_CI_LCD(0,0x01);
	usleep(2000);

	while(*p != '\n') {
		ALT_CI_LCD(1, *p);
		p++;
    815c:	8c400044 	addi	r17,r17,1
		usleep(2000);
    8160:	00088240 	call	8824 <usleep>
    8164:	003ff906 	br	814c <_gp+0xffff73c8>
	}

	ALT_CI_LCD(0,0x00);
    8168:	0005c032 	custom	0,r2,zero,zero
	usleep(2000);
    816c:	0101f404 	movi	r4,2000
}
    8170:	dfc00317 	ldw	ra,12(sp)
    8174:	dc800217 	ldw	r18,8(sp)
    8178:	dc400117 	ldw	r17,4(sp)
    817c:	dc000017 	ldw	r16,0(sp)
    8180:	dec00404 	addi	sp,sp,16
		p++;
		usleep(2000);
	}

	ALT_CI_LCD(0,0x00);
	usleep(2000);
    8184:	00088241 	jmpi	8824 <usleep>

00008188 <main>:
#include "uart.h"

char opt[5][8]  = {"Menu 01\n", "Menu 02\n", "Menu 03\n", "Menu 04\n", "Menu 05\n"};
char msg[5][12] = {"Mensagem 01\n", "Mensagem 02\n", "Mensagem 03\n", "Mensagem 04\n", "Mensagem 05\n"};

int main() {
    8188:	defff704 	addi	sp,sp,-36
    818c:	dfc00815 	stw	ra,32(sp)
    8190:	ddc00715 	stw	r23,28(sp)
    8194:	dd800615 	stw	r22,24(sp)
    8198:	dd400515 	stw	r21,20(sp)
    819c:	dd000415 	stw	r20,16(sp)
    81a0:	dc800215 	stw	r18,8(sp)
    81a4:	dc400115 	stw	r17,4(sp)
    81a8:	dc000015 	stw	r16,0(sp)
    81ac:	dcc00315 	stw	r19,12(sp)
	lcd_init();
    81b0:	000805c0 	call	805c <lcd_init>
	uart_write(WIFI_MODE, COMMAND, 1000);
    81b4:	01000074 	movhi	r4,1
    81b8:	0180fa04 	movi	r6,1000
    81bc:	01400044 	movi	r5,1
    81c0:	2122cb04 	addi	r4,r4,-29908
    81c4:	000845c0 	call	845c <uart_write>
	uart_write(WIFI_CONNECT, COMMAND, 6000000);
    81c8:	01801734 	movhi	r6,92
    81cc:	01000074 	movhi	r4,1
    81d0:	31a36004 	addi	r6,r6,-29312
    81d4:	01400044 	movi	r5,1
    81d8:	2122cf04 	addi	r4,r4,-29892

	int btn;
	int menu  = 1;
	int in    = 1;
    81dc:	04400044 	movi	r17,1
	int index = 0;

	while(1){
		btn = IORD(PI_BASE, 0);
    81e0:	05400074 	movhi	r21,1
		} else {
			if(btn == 7) {
				menu = 1;
				in   = 1;
			} else if(in) {
				lcd_print(msg[index]);
    81e4:	05800074 	movhi	r22,1
				IOWR(PO_BASE, 0, ~(index + 1));
    81e8:	05000074 	movhi	r20,1
				menu = 0;
				in   = 1;
			}

			if(menu && in) {
				lcd_print(opt[index]);
    81ec:	05c00074 	movhi	r23,1
char msg[5][12] = {"Mensagem 01\n", "Mensagem 02\n", "Mensagem 03\n", "Mensagem 04\n", "Mensagem 05\n"};

int main() {
	lcd_init();
	uart_write(WIFI_MODE, COMMAND, 1000);
	uart_write(WIFI_CONNECT, COMMAND, 6000000);
    81f0:	000845c0 	call	845c <uart_write>

	int btn;
	int menu  = 1;
	int in    = 1;
	int index = 0;
    81f4:	0021883a 	mov	r16,zero
	lcd_init();
	uart_write(WIFI_MODE, COMMAND, 1000);
	uart_write(WIFI_CONNECT, COMMAND, 6000000);

	int btn;
	int menu  = 1;
    81f8:	8825883a 	mov	r18,r17
	int in    = 1;
	int index = 0;

	while(1){
		btn = IORD(PI_BASE, 0);
    81fc:	ad440c04 	addi	r21,r21,4144
		} else {
			if(btn == 7) {
				menu = 1;
				in   = 1;
			} else if(in) {
				lcd_print(msg[index]);
    8200:	b5a2ef04 	addi	r22,r22,-29764
				IOWR(PO_BASE, 0, ~(index + 1));
    8204:	a5040804 	addi	r20,r20,4128
				menu = 0;
				in   = 1;
			}

			if(menu && in) {
				lcd_print(opt[index]);
    8208:	bde2fe04 	addi	r23,r23,-29704
	int menu  = 1;
	int in    = 1;
	int index = 0;

	while(1){
		btn = IORD(PI_BASE, 0);
    820c:	acc00037 	ldwio	r19,0(r21)
		usleep(100000);
    8210:	010000b4 	movhi	r4,2
    8214:	2121a804 	addi	r4,r4,-31072
    8218:	00088240 	call	8824 <usleep>

		if(menu) {
    821c:	90001826 	beq	r18,zero,8280 <main+0xf8>
			if(btn == 13) {
    8220:	00800344 	movi	r2,13
    8224:	9880041e 	bne	r19,r2,8238 <main+0xb0>
				if(index < 4) index++;
    8228:	00800104 	movi	r2,4
    822c:	80808726 	beq	r16,r2,844c <main+0x2c4>
    8230:	84000044 	addi	r16,r16,1
    8234:	00000b06 	br	8264 <main+0xdc>
				else 		  index = 0;
				in = 1;
			} else if(btn == 14) {
    8238:	00800384 	movi	r2,14
    823c:	9880031e 	bne	r19,r2,824c <main+0xc4>
				if(index > 0) index--;
    8240:	80008426 	beq	r16,zero,8454 <main+0x2cc>
    8244:	843fffc4 	addi	r16,r16,-1
    8248:	00000606 	br	8264 <main+0xdc>
				else 		  index = 4;
				in = 1;
			} else if(btn == 11) {
    824c:	008002c4 	movi	r2,11
    8250:	9880031e 	bne	r19,r2,8260 <main+0xd8>
				menu = 0;
				in   = 1;
    8254:	04400044 	movi	r17,1
    8258:	0025883a 	mov	r18,zero
    825c:	003feb06 	br	820c <_gp+0xffff7488>
			}

			if(menu && in) {
    8260:	88007826 	beq	r17,zero,8444 <main+0x2bc>
				lcd_print(opt[index]);
    8264:	800890fa 	slli	r4,r16,3
    8268:	b909883a 	add	r4,r23,r4
    826c:	00081100 	call	8110 <lcd_print>
				IOWR(PO_BASE, 0, 15);
    8270:	008003c4 	movi	r2,15
    8274:	a0800035 	stwio	r2,0(r20)
				in = 0;
    8278:	0023883a 	mov	r17,zero
    827c:	00007106 	br	8444 <main+0x2bc>
			}
		} else {
			if(btn == 7) {
    8280:	008001c4 	movi	r2,7
    8284:	9880031e 	bne	r19,r2,8294 <main+0x10c>
				menu = 1;
				in   = 1;
    8288:	04400044 	movi	r17,1
				IOWR(PO_BASE, 0, 15);
				in = 0;
			}
		} else {
			if(btn == 7) {
				menu = 1;
    828c:	8825883a 	mov	r18,r17
    8290:	003fde06 	br	820c <_gp+0xffff7488>
				in   = 1;
			} else if(in) {
    8294:	883fdd26 	beq	r17,zero,820c <_gp+0xffff7488>
				lcd_print(msg[index]);
    8298:	01400304 	movi	r5,12
    829c:	8009883a 	mov	r4,r16
    82a0:	00085100 	call	8510 <__mulsi3>
    82a4:	b089883a 	add	r4,r22,r2
    82a8:	00081100 	call	8110 <lcd_print>
				IOWR(PO_BASE, 0, ~(index + 1));
    82ac:	80800044 	addi	r2,r16,1
    82b0:	0084303a 	nor	r2,zero,r2
    82b4:	a0800035 	stwio	r2,0(r20)
				in = 0;

				uart_write(TCP_CONNECT, COMMAND, 2000000);
    82b8:	04400044 	movi	r17,1
    82bc:	018007f4 	movhi	r6,31
    82c0:	01000074 	movhi	r4,1
    82c4:	31a12004 	addi	r6,r6,-31616
    82c8:	880b883a 	mov	r5,r17
    82cc:	2122d604 	addi	r4,r4,-29864
    82d0:	000845c0 	call	845c <uart_write>

				uart_write(MQTT_CONNECT_SIZE, COMMAND, 2000000);
    82d4:	018007f4 	movhi	r6,31
    82d8:	01000074 	movhi	r4,1
    82dc:	31a12004 	addi	r6,r6,-31616
    82e0:	880b883a 	mov	r5,r17
    82e4:	2122df04 	addi	r4,r4,-29828
    82e8:	000845c0 	call	845c <uart_write>
				uart_write(MQTT_CONNECT, DATA, 2000000);
    82ec:	018007f4 	movhi	r6,31
    82f0:	01000074 	movhi	r4,1
    82f4:	31a12004 	addi	r6,r6,-31616
    82f8:	000b883a 	mov	r5,zero
    82fc:	21232384 	addi	r4,r4,-29554
    8300:	000845c0 	call	845c <uart_write>

				if(index == 0) {
    8304:	80000c1e 	bne	r16,zero,8338 <main+0x1b0>
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    8308:	018007f4 	movhi	r6,31
    830c:	01000074 	movhi	r4,1
    8310:	31a12004 	addi	r6,r6,-31616
    8314:	880b883a 	mov	r5,r17
    8318:	2122e304 	addi	r4,r4,-29812
    831c:	000845c0 	call	845c <uart_write>
					uart_write(MESSAGE_0, DATA, 2000000);
    8320:	018007f4 	movhi	r6,31
    8324:	01000074 	movhi	r4,1
    8328:	31a12004 	addi	r6,r6,-31616
    832c:	000b883a 	mov	r5,zero
    8330:	21231e04 	addi	r4,r4,-29576
    8334:	00002f06 	br	83f4 <main+0x26c>
				} else if(index == 1) {
    8338:	84400c1e 	bne	r16,r17,836c <main+0x1e4>
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    833c:	018007f4 	movhi	r6,31
    8340:	01000074 	movhi	r4,1
    8344:	31a12004 	addi	r6,r6,-31616
    8348:	800b883a 	mov	r5,r16
    834c:	2122e304 	addi	r4,r4,-29812
    8350:	000845c0 	call	845c <uart_write>
					uart_write(MESSAGE_1, DATA, 2000000);
    8354:	018007f4 	movhi	r6,31
    8358:	01000074 	movhi	r4,1
    835c:	31a12004 	addi	r6,r6,-31616
    8360:	000b883a 	mov	r5,zero
    8364:	21231884 	addi	r4,r4,-29598
    8368:	00002206 	br	83f4 <main+0x26c>
				} else if(index == 2) {
    836c:	00800084 	movi	r2,2
    8370:	80800c1e 	bne	r16,r2,83a4 <main+0x21c>
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    8374:	018007f4 	movhi	r6,31
    8378:	01000074 	movhi	r4,1
    837c:	31a12004 	addi	r6,r6,-31616
    8380:	880b883a 	mov	r5,r17
    8384:	2122e304 	addi	r4,r4,-29812
    8388:	000845c0 	call	845c <uart_write>
					uart_write(MESSAGE_2, DATA, 2000000);
    838c:	018007f4 	movhi	r6,31
    8390:	01000074 	movhi	r4,1
    8394:	31a12004 	addi	r6,r6,-31616
    8398:	000b883a 	mov	r5,zero
    839c:	21231304 	addi	r4,r4,-29620
    83a0:	00001406 	br	83f4 <main+0x26c>
				} else if(index == 3) {
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    83a4:	018007f4 	movhi	r6,31
    83a8:	01000074 	movhi	r4,1
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
					uart_write(MESSAGE_1, DATA, 2000000);
				} else if(index == 2) {
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
					uart_write(MESSAGE_2, DATA, 2000000);
				} else if(index == 3) {
    83ac:	008000c4 	movi	r2,3
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    83b0:	31a12004 	addi	r6,r6,-31616
    83b4:	880b883a 	mov	r5,r17
    83b8:	2122e304 	addi	r4,r4,-29812
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
					uart_write(MESSAGE_1, DATA, 2000000);
				} else if(index == 2) {
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
					uart_write(MESSAGE_2, DATA, 2000000);
				} else if(index == 3) {
    83bc:	8080071e 	bne	r16,r2,83dc <main+0x254>
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    83c0:	000845c0 	call	845c <uart_write>
					uart_write(MESSAGE_3, DATA, 2000000);
    83c4:	018007f4 	movhi	r6,31
    83c8:	01000074 	movhi	r4,1
    83cc:	31a12004 	addi	r6,r6,-31616
    83d0:	000b883a 	mov	r5,zero
    83d4:	21230d84 	addi	r4,r4,-29642
    83d8:	00000606 	br	83f4 <main+0x26c>
				} else if(index == 4) {
					uart_write(MESSAGE_SIZE, COMMAND, 2000000);
    83dc:	000845c0 	call	845c <uart_write>
					uart_write(MESSAGE_4, DATA, 2000000);
    83e0:	018007f4 	movhi	r6,31
    83e4:	01000074 	movhi	r4,1
    83e8:	31a12004 	addi	r6,r6,-31616
    83ec:	000b883a 	mov	r5,zero
    83f0:	21230804 	addi	r4,r4,-29664
    83f4:	000845c0 	call	845c <uart_write>
				}

				uart_write(MQTT_DISCONNECT_SIZE, COMMAND, 2000000);
    83f8:	018007f4 	movhi	r6,31
    83fc:	01000074 	movhi	r4,1
    8400:	31a12004 	addi	r6,r6,-31616
    8404:	01400044 	movi	r5,1
    8408:	2122e704 	addi	r4,r4,-29796
    840c:	000845c0 	call	845c <uart_write>
				uart_write(MQTT_DISCONNECT, DATA, 2000000);
    8410:	018007f4 	movhi	r6,31
    8414:	31a12004 	addi	r6,r6,-31616
    8418:	000b883a 	mov	r5,zero
    841c:	d1200004 	addi	r4,gp,-32768
    8420:	000845c0 	call	845c <uart_write>

				uart_write(TCP_DISCONNECT, COMMAND, 2000000);
    8424:	018007f4 	movhi	r6,31
    8428:	01000074 	movhi	r4,1
    842c:	31a12004 	addi	r6,r6,-31616
    8430:	01400044 	movi	r5,1
    8434:	2122eb04 	addi	r4,r4,-29780
    8438:	000845c0 	call	845c <uart_write>
				menu = 1;
				in   = 1;
			} else if(in) {
				lcd_print(msg[index]);
				IOWR(PO_BASE, 0, ~(index + 1));
				in = 0;
    843c:	0023883a 	mov	r17,zero
    8440:	003f7206 	br	820c <_gp+0xffff7488>
    8444:	04800044 	movi	r18,1
    8448:	003f7006 	br	820c <_gp+0xffff7488>
		usleep(100000);

		if(menu) {
			if(btn == 13) {
				if(index < 4) index++;
				else 		  index = 0;
    844c:	0021883a 	mov	r16,zero
    8450:	003f8406 	br	8264 <_gp+0xffff74e0>
				in = 1;
			} else if(btn == 14) {
				if(index > 0) index--;
				else 		  index = 4;
    8454:	04000104 	movi	r16,4
    8458:	003f8206 	br	8264 <_gp+0xffff74e0>

0000845c <uart_write>:
#include <stdio.h>
#include "altera_avalon_uart_regs.h"
#include "system.h"

void uart_write(char *d, int c, int t) {
    845c:	defffc04 	addi	sp,sp,-16
	char *p = d;

	while(1) {
		while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
    8460:	02000074 	movhi	r8,1
		if(*p == '\n') {
			if(c) IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, *p);
			break;
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, *p);
    8464:	01c00074 	movhi	r7,1
#include <stdio.h>
#include "altera_avalon_uart_regs.h"
#include "system.h"

void uart_write(char *d, int c, int t) {
    8468:	dfc00315 	stw	ra,12(sp)
    846c:	dc800215 	stw	r18,8(sp)
    8470:	dc400115 	stw	r17,4(sp)
    8474:	dc000015 	stw	r16,0(sp)
	char *p = d;

	while(1) {
		while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
    8478:	42040204 	addi	r8,r8,4104

		if(*p == '\n') {
    847c:	00c00284 	movi	r3,10
			if(c) IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, *p);
			break;
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, *p);
    8480:	39c40104 	addi	r7,r7,4100

void uart_write(char *d, int c, int t) {
	char *p = d;

	while(1) {
		while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
    8484:	40800037 	ldwio	r2,0(r8)
    8488:	04400074 	movhi	r17,1
    848c:	1080100c 	andi	r2,r2,64
    8490:	8c440204 	addi	r17,r17,4104
    8494:	103ffb26 	beq	r2,zero,8484 <_gp+0xffff7700>

		if(*p == '\n') {
    8498:	20800007 	ldb	r2,0(r4)
    849c:	10c0051e 	bne	r2,r3,84b4 <uart_write+0x58>
			if(c) IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, *p);
    84a0:	28000726 	beq	r5,zero,84c0 <uart_write+0x64>
    84a4:	00800074 	movhi	r2,1
    84a8:	10840104 	addi	r2,r2,4100
    84ac:	10c00035 	stwio	r3,0(r2)
    84b0:	00000306 	br	84c0 <uart_write+0x64>
			break;
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, *p);
    84b4:	38800035 	stwio	r2,0(r7)
		p++;
    84b8:	21000044 	addi	r4,r4,1
	}
    84bc:	003ff106 	br	8484 <_gp+0xffff7700>

	while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));
    84c0:	88800037 	ldwio	r2,0(r17)
    84c4:	1080200c 	andi	r2,r2,128
    84c8:	103ffd26 	beq	r2,zero,84c0 <_gp+0xffff773c>

	while(t--) {
		if(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
			printf("%c", IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE));
    84cc:	04800074 	movhi	r18,1
    84d0:	3021883a 	mov	r16,r6
    84d4:	94840004 	addi	r18,r18,4096
		p++;
	}

	while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK));

	while(t--) {
    84d8:	80000726 	beq	r16,zero,84f8 <uart_write+0x9c>
		if(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    84dc:	88800037 	ldwio	r2,0(r17)
    84e0:	1080200c 	andi	r2,r2,128
    84e4:	10000226 	beq	r2,zero,84f0 <uart_write+0x94>
			printf("%c", IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE));
    84e8:	91000037 	ldwio	r4,0(r18)
    84ec:	00085400 	call	8540 <putchar>
    84f0:	843fffc4 	addi	r16,r16,-1
    84f4:	003ff806 	br	84d8 <_gp+0xffff7754>
	}
}
    84f8:	dfc00317 	ldw	ra,12(sp)
    84fc:	dc800217 	ldw	r18,8(sp)
    8500:	dc400117 	ldw	r17,4(sp)
    8504:	dc000017 	ldw	r16,0(sp)
    8508:	dec00404 	addi	sp,sp,16
    850c:	f800283a 	ret

00008510 <__mulsi3>:
    8510:	0005883a 	mov	r2,zero
    8514:	20000726 	beq	r4,zero,8534 <__mulsi3+0x24>
    8518:	20c0004c 	andi	r3,r4,1
    851c:	2008d07a 	srli	r4,r4,1
    8520:	18000126 	beq	r3,zero,8528 <__mulsi3+0x18>
    8524:	1145883a 	add	r2,r2,r5
    8528:	294b883a 	add	r5,r5,r5
    852c:	203ffa1e 	bne	r4,zero,8518 <_gp+0xffff7794>
    8530:	f800283a 	ret
    8534:	f800283a 	ret

00008538 <_putchar_r>:
    8538:	21800217 	ldw	r6,8(r4)
    853c:	00085b01 	jmpi	85b0 <_putc_r>

00008540 <putchar>:
    8540:	00800074 	movhi	r2,1
    8544:	10a36304 	addi	r2,r2,-29300
    8548:	10800017 	ldw	r2,0(r2)
    854c:	200b883a 	mov	r5,r4
    8550:	11800217 	ldw	r6,8(r2)
    8554:	1009883a 	mov	r4,r2
    8558:	00085b01 	jmpi	85b0 <_putc_r>

0000855c <putc>:
    855c:	defffd04 	addi	sp,sp,-12
    8560:	00800074 	movhi	r2,1
    8564:	dc000115 	stw	r16,4(sp)
    8568:	dfc00215 	stw	ra,8(sp)
    856c:	10a18204 	addi	r2,r2,-31224
    8570:	28800115 	stw	r2,4(r5)
    8574:	00800074 	movhi	r2,1
    8578:	10a36304 	addi	r2,r2,-29300
    857c:	d9000005 	stb	r4,0(sp)
    8580:	2021883a 	mov	r16,r4
    8584:	11000017 	ldw	r4,0(r2)
    8588:	01c00044 	movi	r7,1
    858c:	d80d883a 	mov	r6,sp
    8590:	00086080 	call	8608 <__sfvwrite_small_dev>
    8594:	00ffffc4 	movi	r3,-1
    8598:	10c00126 	beq	r2,r3,85a0 <putc+0x44>
    859c:	8005883a 	mov	r2,r16
    85a0:	dfc00217 	ldw	ra,8(sp)
    85a4:	dc000117 	ldw	r16,4(sp)
    85a8:	dec00304 	addi	sp,sp,12
    85ac:	f800283a 	ret

000085b0 <_putc_r>:
    85b0:	defffd04 	addi	sp,sp,-12
    85b4:	00800074 	movhi	r2,1
    85b8:	dc000115 	stw	r16,4(sp)
    85bc:	dfc00215 	stw	ra,8(sp)
    85c0:	10a18204 	addi	r2,r2,-31224
    85c4:	30800115 	stw	r2,4(r6)
    85c8:	00800074 	movhi	r2,1
    85cc:	10a36304 	addi	r2,r2,-29300
    85d0:	11000017 	ldw	r4,0(r2)
    85d4:	2821883a 	mov	r16,r5
    85d8:	01c00044 	movi	r7,1
    85dc:	300b883a 	mov	r5,r6
    85e0:	d80d883a 	mov	r6,sp
    85e4:	dc000005 	stb	r16,0(sp)
    85e8:	00086080 	call	8608 <__sfvwrite_small_dev>
    85ec:	00ffffc4 	movi	r3,-1
    85f0:	10c00126 	beq	r2,r3,85f8 <_putc_r+0x48>
    85f4:	8005883a 	mov	r2,r16
    85f8:	dfc00217 	ldw	ra,8(sp)
    85fc:	dc000117 	ldw	r16,4(sp)
    8600:	dec00304 	addi	sp,sp,12
    8604:	f800283a 	ret

00008608 <__sfvwrite_small_dev>:
    8608:	2880000b 	ldhu	r2,0(r5)
    860c:	1080020c 	andi	r2,r2,8
    8610:	10002126 	beq	r2,zero,8698 <__sfvwrite_small_dev+0x90>
    8614:	2880008f 	ldh	r2,2(r5)
    8618:	defffa04 	addi	sp,sp,-24
    861c:	dc000015 	stw	r16,0(sp)
    8620:	dfc00515 	stw	ra,20(sp)
    8624:	dd000415 	stw	r20,16(sp)
    8628:	dcc00315 	stw	r19,12(sp)
    862c:	dc800215 	stw	r18,8(sp)
    8630:	dc400115 	stw	r17,4(sp)
    8634:	2821883a 	mov	r16,r5
    8638:	10001216 	blt	r2,zero,8684 <__sfvwrite_small_dev+0x7c>
    863c:	2027883a 	mov	r19,r4
    8640:	3025883a 	mov	r18,r6
    8644:	3823883a 	mov	r17,r7
    8648:	05010004 	movi	r20,1024
    864c:	04400b0e 	bge	zero,r17,867c <__sfvwrite_small_dev+0x74>
    8650:	880f883a 	mov	r7,r17
    8654:	a440010e 	bge	r20,r17,865c <__sfvwrite_small_dev+0x54>
    8658:	01c10004 	movi	r7,1024
    865c:	8140008f 	ldh	r5,2(r16)
    8660:	900d883a 	mov	r6,r18
    8664:	9809883a 	mov	r4,r19
    8668:	00086c00 	call	86c0 <_write_r>
    866c:	0080050e 	bge	zero,r2,8684 <__sfvwrite_small_dev+0x7c>
    8670:	88a3c83a 	sub	r17,r17,r2
    8674:	90a5883a 	add	r18,r18,r2
    8678:	003ff406 	br	864c <_gp+0xffff78c8>
    867c:	0005883a 	mov	r2,zero
    8680:	00000706 	br	86a0 <__sfvwrite_small_dev+0x98>
    8684:	8080000b 	ldhu	r2,0(r16)
    8688:	10801014 	ori	r2,r2,64
    868c:	8080000d 	sth	r2,0(r16)
    8690:	00bfffc4 	movi	r2,-1
    8694:	00000206 	br	86a0 <__sfvwrite_small_dev+0x98>
    8698:	00bfffc4 	movi	r2,-1
    869c:	f800283a 	ret
    86a0:	dfc00517 	ldw	ra,20(sp)
    86a4:	dd000417 	ldw	r20,16(sp)
    86a8:	dcc00317 	ldw	r19,12(sp)
    86ac:	dc800217 	ldw	r18,8(sp)
    86b0:	dc400117 	ldw	r17,4(sp)
    86b4:	dc000017 	ldw	r16,0(sp)
    86b8:	dec00604 	addi	sp,sp,24
    86bc:	f800283a 	ret

000086c0 <_write_r>:
    86c0:	defffd04 	addi	sp,sp,-12
    86c4:	dc000015 	stw	r16,0(sp)
    86c8:	04000074 	movhi	r16,1
    86cc:	dc400115 	stw	r17,4(sp)
    86d0:	8423df04 	addi	r16,r16,-28804
    86d4:	2023883a 	mov	r17,r4
    86d8:	2809883a 	mov	r4,r5
    86dc:	300b883a 	mov	r5,r6
    86e0:	380d883a 	mov	r6,r7
    86e4:	dfc00215 	stw	ra,8(sp)
    86e8:	80000015 	stw	zero,0(r16)
    86ec:	00088280 	call	8828 <write>
    86f0:	00ffffc4 	movi	r3,-1
    86f4:	10c0031e 	bne	r2,r3,8704 <_write_r+0x44>
    86f8:	80c00017 	ldw	r3,0(r16)
    86fc:	18000126 	beq	r3,zero,8704 <_write_r+0x44>
    8700:	88c00015 	stw	r3,0(r17)
    8704:	dfc00217 	ldw	ra,8(sp)
    8708:	dc400117 	ldw	r17,4(sp)
    870c:	dc000017 	ldw	r16,0(sp)
    8710:	dec00304 	addi	sp,sp,12
    8714:	f800283a 	ret

00008718 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8718:	deffff04 	addi	sp,sp,-4
    871c:	01000074 	movhi	r4,1
    8720:	01400074 	movhi	r5,1
    8724:	dfc00015 	stw	ra,0(sp)
    8728:	2122ef04 	addi	r4,r4,-29764
    872c:	29636704 	addi	r5,r5,-29284

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8730:	2140061e 	bne	r4,r5,874c <alt_load+0x34>
    8734:	01000074 	movhi	r4,1
    8738:	01400074 	movhi	r5,1
    873c:	21200804 	addi	r4,r4,-32736
    8740:	29600804 	addi	r5,r5,-32736
    8744:	2140121e 	bne	r4,r5,8790 <alt_load+0x78>
    8748:	00000b06 	br	8778 <alt_load+0x60>
    874c:	00c00074 	movhi	r3,1
    8750:	18e36704 	addi	r3,r3,-29284
    8754:	1907c83a 	sub	r3,r3,r4
    8758:	0005883a 	mov	r2,zero
  {
    while( to != end )
    875c:	10fff526 	beq	r2,r3,8734 <_gp+0xffff79b0>
    {
      *to++ = *from++;
    8760:	114f883a 	add	r7,r2,r5
    8764:	39c00017 	ldw	r7,0(r7)
    8768:	110d883a 	add	r6,r2,r4
    876c:	10800104 	addi	r2,r2,4
    8770:	31c00015 	stw	r7,0(r6)
    8774:	003ff906 	br	875c <_gp+0xffff79d8>
    8778:	01000074 	movhi	r4,1
    877c:	01400074 	movhi	r5,1
    8780:	2122cb04 	addi	r4,r4,-29908
    8784:	2962cb04 	addi	r5,r5,-29908

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8788:	2140101e 	bne	r4,r5,87cc <alt_load+0xb4>
    878c:	00000b06 	br	87bc <alt_load+0xa4>
    8790:	00c00074 	movhi	r3,1
    8794:	18e00804 	addi	r3,r3,-32736
    8798:	1907c83a 	sub	r3,r3,r4
    879c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    87a0:	10fff526 	beq	r2,r3,8778 <_gp+0xffff79f4>
    {
      *to++ = *from++;
    87a4:	114f883a 	add	r7,r2,r5
    87a8:	39c00017 	ldw	r7,0(r7)
    87ac:	110d883a 	add	r6,r2,r4
    87b0:	10800104 	addi	r2,r2,4
    87b4:	31c00015 	stw	r7,0(r6)
    87b8:	003ff906 	br	87a0 <_gp+0xffff7a1c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    87bc:	00089680 	call	8968 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    87c0:	dfc00017 	ldw	ra,0(sp)
    87c4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    87c8:	000896c1 	jmpi	896c <alt_icache_flush_all>
    87cc:	00c00074 	movhi	r3,1
    87d0:	18e2ef04 	addi	r3,r3,-29764
    87d4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    87d8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    87dc:	18bff726 	beq	r3,r2,87bc <_gp+0xffff7a38>
    {
      *to++ = *from++;
    87e0:	114f883a 	add	r7,r2,r5
    87e4:	39c00017 	ldw	r7,0(r7)
    87e8:	110d883a 	add	r6,r2,r4
    87ec:	10800104 	addi	r2,r2,4
    87f0:	31c00015 	stw	r7,0(r6)
    87f4:	003ff906 	br	87dc <_gp+0xffff7a58>

000087f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    87f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    87fc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8800:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8804:	00088880 	call	8888 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8808:	00088a80 	call	88a8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    880c:	d1a07f17 	ldw	r6,-32260(gp)
    8810:	d1608017 	ldw	r5,-32256(gp)
    8814:	d1208117 	ldw	r4,-32252(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8818:	dfc00017 	ldw	ra,0(sp)
    881c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8820:	00081881 	jmpi	8188 <main>

00008824 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8824:	00088e01 	jmpi	88e0 <alt_busy_sleep>

00008828 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8828:	00800044 	movi	r2,1
    882c:	20800226 	beq	r4,r2,8838 <write+0x10>
    8830:	00800084 	movi	r2,2
    8834:	2080041e 	bne	r4,r2,8848 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8838:	01000074 	movhi	r4,1
    883c:	000f883a 	mov	r7,zero
    8840:	21236504 	addi	r4,r4,-29292
    8844:	00088ac1 	jmpi	88ac <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8848:	d0a00517 	ldw	r2,-32748(gp)
    884c:	10000926 	beq	r2,zero,8874 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8850:	deffff04 	addi	sp,sp,-4
    8854:	dfc00015 	stw	ra,0(sp)
    8858:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    885c:	00c01444 	movi	r3,81
    8860:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8864:	00bfffc4 	movi	r2,-1
    8868:	dfc00017 	ldw	ra,0(sp)
    886c:	dec00104 	addi	sp,sp,4
    8870:	f800283a 	ret
    8874:	d0a07e04 	addi	r2,gp,-32264
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8878:	00c01444 	movi	r3,81
    887c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8880:	00bfffc4 	movi	r2,-1
    8884:	f800283a 	ret

00008888 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8888:	deffff04 	addi	sp,sp,-4
    888c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    8890:	00089700 	call	8970 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8894:	00800044 	movi	r2,1
    8898:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    889c:	dfc00017 	ldw	ra,0(sp)
    88a0:	dec00104 	addi	sp,sp,4
    88a4:	f800283a 	ret

000088a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    88a8:	f800283a 	ret

000088ac <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    88ac:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    88b0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    88b4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    88b8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    88bc:	2980072e 	bgeu	r5,r6,88dc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    88c0:	38c00037 	ldwio	r3,0(r7)
    88c4:	18ffffec 	andhi	r3,r3,65535
    88c8:	183ffc26 	beq	r3,zero,88bc <_gp+0xffff7b38>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    88cc:	28c00007 	ldb	r3,0(r5)
    88d0:	20c00035 	stwio	r3,0(r4)
    88d4:	29400044 	addi	r5,r5,1
    88d8:	003ff806 	br	88bc <_gp+0xffff7b38>

  return count;
}
    88dc:	f800283a 	ret

000088e0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    88e0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    88e4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    88e8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    88ec:	dc000015 	stw	r16,0(sp)
    88f0:	dfc00115 	stw	ra,4(sp)
    88f4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    88f8:	0008a700 	call	8a70 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    88fc:	10001026 	beq	r2,zero,8940 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8900:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8904:	013999b4 	movhi	r4,58982
    8908:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    890c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8910:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8914:	297fffc4 	addi	r5,r5,-1
    8918:	283ffe1e 	bne	r5,zero,8914 <_gp+0xffff7b90>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    891c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8920:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8924:	18bffb16 	blt	r3,r2,8914 <_gp+0xffff7b90>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8928:	01400144 	movi	r5,5
    892c:	8009883a 	mov	r4,r16
    8930:	00085100 	call	8510 <__mulsi3>
    8934:	10bfffc4 	addi	r2,r2,-1
    8938:	103ffe1e 	bne	r2,zero,8934 <_gp+0xffff7bb0>
    893c:	00000506 	br	8954 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8940:	01400144 	movi	r5,5
    8944:	8009883a 	mov	r4,r16
    8948:	00085100 	call	8510 <__mulsi3>
    894c:	10bfffc4 	addi	r2,r2,-1
    8950:	00bffe16 	blt	zero,r2,894c <_gp+0xffff7bc8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8954:	0005883a 	mov	r2,zero
    8958:	dfc00117 	ldw	ra,4(sp)
    895c:	dc000017 	ldw	r16,0(sp)
    8960:	dec00204 	addi	sp,sp,8
    8964:	f800283a 	ret

00008968 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8968:	f800283a 	ret

0000896c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    896c:	f800283a 	ret

00008970 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8970:	000170fa 	wrctl	ienable,zero
    8974:	f800283a 	ret

00008978 <__divsi3>:
    8978:	20001b16 	blt	r4,zero,89e8 <__divsi3+0x70>
    897c:	000f883a 	mov	r7,zero
    8980:	28001616 	blt	r5,zero,89dc <__divsi3+0x64>
    8984:	200d883a 	mov	r6,r4
    8988:	29001a2e 	bgeu	r5,r4,89f4 <__divsi3+0x7c>
    898c:	00800804 	movi	r2,32
    8990:	00c00044 	movi	r3,1
    8994:	00000106 	br	899c <__divsi3+0x24>
    8998:	10000d26 	beq	r2,zero,89d0 <__divsi3+0x58>
    899c:	294b883a 	add	r5,r5,r5
    89a0:	10bfffc4 	addi	r2,r2,-1
    89a4:	18c7883a 	add	r3,r3,r3
    89a8:	293ffb36 	bltu	r5,r4,8998 <_gp+0xffff7c14>
    89ac:	0005883a 	mov	r2,zero
    89b0:	18000726 	beq	r3,zero,89d0 <__divsi3+0x58>
    89b4:	0005883a 	mov	r2,zero
    89b8:	31400236 	bltu	r6,r5,89c4 <__divsi3+0x4c>
    89bc:	314dc83a 	sub	r6,r6,r5
    89c0:	10c4b03a 	or	r2,r2,r3
    89c4:	1806d07a 	srli	r3,r3,1
    89c8:	280ad07a 	srli	r5,r5,1
    89cc:	183ffa1e 	bne	r3,zero,89b8 <_gp+0xffff7c34>
    89d0:	38000126 	beq	r7,zero,89d8 <__divsi3+0x60>
    89d4:	0085c83a 	sub	r2,zero,r2
    89d8:	f800283a 	ret
    89dc:	014bc83a 	sub	r5,zero,r5
    89e0:	39c0005c 	xori	r7,r7,1
    89e4:	003fe706 	br	8984 <_gp+0xffff7c00>
    89e8:	0109c83a 	sub	r4,zero,r4
    89ec:	01c00044 	movi	r7,1
    89f0:	003fe306 	br	8980 <_gp+0xffff7bfc>
    89f4:	00c00044 	movi	r3,1
    89f8:	003fee06 	br	89b4 <_gp+0xffff7c30>

000089fc <__modsi3>:
    89fc:	20001716 	blt	r4,zero,8a5c <__modsi3+0x60>
    8a00:	000f883a 	mov	r7,zero
    8a04:	2005883a 	mov	r2,r4
    8a08:	28001216 	blt	r5,zero,8a54 <__modsi3+0x58>
    8a0c:	2900162e 	bgeu	r5,r4,8a68 <__modsi3+0x6c>
    8a10:	01800804 	movi	r6,32
    8a14:	00c00044 	movi	r3,1
    8a18:	00000106 	br	8a20 <__modsi3+0x24>
    8a1c:	30000a26 	beq	r6,zero,8a48 <__modsi3+0x4c>
    8a20:	294b883a 	add	r5,r5,r5
    8a24:	31bfffc4 	addi	r6,r6,-1
    8a28:	18c7883a 	add	r3,r3,r3
    8a2c:	293ffb36 	bltu	r5,r4,8a1c <_gp+0xffff7c98>
    8a30:	18000526 	beq	r3,zero,8a48 <__modsi3+0x4c>
    8a34:	1806d07a 	srli	r3,r3,1
    8a38:	11400136 	bltu	r2,r5,8a40 <__modsi3+0x44>
    8a3c:	1145c83a 	sub	r2,r2,r5
    8a40:	280ad07a 	srli	r5,r5,1
    8a44:	183ffb1e 	bne	r3,zero,8a34 <_gp+0xffff7cb0>
    8a48:	38000126 	beq	r7,zero,8a50 <__modsi3+0x54>
    8a4c:	0085c83a 	sub	r2,zero,r2
    8a50:	f800283a 	ret
    8a54:	014bc83a 	sub	r5,zero,r5
    8a58:	003fec06 	br	8a0c <_gp+0xffff7c88>
    8a5c:	0109c83a 	sub	r4,zero,r4
    8a60:	01c00044 	movi	r7,1
    8a64:	003fe706 	br	8a04 <_gp+0xffff7c80>
    8a68:	00c00044 	movi	r3,1
    8a6c:	003ff106 	br	8a34 <_gp+0xffff7cb0>

00008a70 <__udivsi3>:
    8a70:	200d883a 	mov	r6,r4
    8a74:	2900152e 	bgeu	r5,r4,8acc <__udivsi3+0x5c>
    8a78:	28001416 	blt	r5,zero,8acc <__udivsi3+0x5c>
    8a7c:	00800804 	movi	r2,32
    8a80:	00c00044 	movi	r3,1
    8a84:	00000206 	br	8a90 <__udivsi3+0x20>
    8a88:	10000e26 	beq	r2,zero,8ac4 <__udivsi3+0x54>
    8a8c:	28000516 	blt	r5,zero,8aa4 <__udivsi3+0x34>
    8a90:	294b883a 	add	r5,r5,r5
    8a94:	10bfffc4 	addi	r2,r2,-1
    8a98:	18c7883a 	add	r3,r3,r3
    8a9c:	293ffa36 	bltu	r5,r4,8a88 <_gp+0xffff7d04>
    8aa0:	18000826 	beq	r3,zero,8ac4 <__udivsi3+0x54>
    8aa4:	0005883a 	mov	r2,zero
    8aa8:	31400236 	bltu	r6,r5,8ab4 <__udivsi3+0x44>
    8aac:	314dc83a 	sub	r6,r6,r5
    8ab0:	10c4b03a 	or	r2,r2,r3
    8ab4:	1806d07a 	srli	r3,r3,1
    8ab8:	280ad07a 	srli	r5,r5,1
    8abc:	183ffa1e 	bne	r3,zero,8aa8 <_gp+0xffff7d24>
    8ac0:	f800283a 	ret
    8ac4:	0005883a 	mov	r2,zero
    8ac8:	f800283a 	ret
    8acc:	00c00044 	movi	r3,1
    8ad0:	003ff406 	br	8aa4 <_gp+0xffff7d20>

00008ad4 <__umodsi3>:
    8ad4:	2005883a 	mov	r2,r4
    8ad8:	2900122e 	bgeu	r5,r4,8b24 <__umodsi3+0x50>
    8adc:	28001116 	blt	r5,zero,8b24 <__umodsi3+0x50>
    8ae0:	01800804 	movi	r6,32
    8ae4:	00c00044 	movi	r3,1
    8ae8:	00000206 	br	8af4 <__umodsi3+0x20>
    8aec:	30000c26 	beq	r6,zero,8b20 <__umodsi3+0x4c>
    8af0:	28000516 	blt	r5,zero,8b08 <__umodsi3+0x34>
    8af4:	294b883a 	add	r5,r5,r5
    8af8:	31bfffc4 	addi	r6,r6,-1
    8afc:	18c7883a 	add	r3,r3,r3
    8b00:	293ffa36 	bltu	r5,r4,8aec <_gp+0xffff7d68>
    8b04:	18000626 	beq	r3,zero,8b20 <__umodsi3+0x4c>
    8b08:	1806d07a 	srli	r3,r3,1
    8b0c:	11400136 	bltu	r2,r5,8b14 <__umodsi3+0x40>
    8b10:	1145c83a 	sub	r2,r2,r5
    8b14:	280ad07a 	srli	r5,r5,1
    8b18:	183ffb1e 	bne	r3,zero,8b08 <_gp+0xffff7d84>
    8b1c:	f800283a 	ret
    8b20:	f800283a 	ret
    8b24:	00c00044 	movi	r3,1
    8b28:	003ff706 	br	8b08 <_gp+0xffff7d84>
