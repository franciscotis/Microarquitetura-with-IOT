
P1.elf:     file format elf32-littlenios2
P1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags r-x
    LOAD off    0x00001a4c vaddr 0x00008a4c paddr 0x00008a58 align 2**12
         filesz 0x0000000c memsz 0x0000000c flags rw-
    LOAD off    0x00001a64 vaddr 0x00008a64 paddr 0x00008a64 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001a58  2**0
                  CONTENTS
  2 .text         000008b8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000174  000088d8  000088d8  000018d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000000c  00008a4c  00008a58  00001a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008a64  00008a64  00001a64  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00008a74  00008a74  00001a58  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  00001a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000184c  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000bf2  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000e5f  00000000  00000000  00004136  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000324  00000000  00000000  00004f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000009ca  00000000  00000000  000052bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000aae  00000000  00000000  00005c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00006734  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00006778  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000077f6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000077f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000077fe  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000077ff  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00007800  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  00007804  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  00007809  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000780e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0000781a  2**0
                  CONTENTS, READONLY
 26 .jdi          00004836  00000000  00000000  00007851  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043602  00000000  00000000  0000c087  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000088d8 l    d  .rodata	00000000 .rodata
00008a4c l    d  .rwdata	00000000 .rwdata
00008a64 l    d  .bss	00000000 .bss
00008a74 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../P1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008560 g     F .text	0000002c alt_main
00008a58 g       *ABS*	00000000 __flash_rwdata_start
00008a4c g     O .rwdata	00000004 rs232
0000858c g     F .text	00000038 alt_putstr
00008700 g     F .text	00000008 altera_nios2_gen2_irq_init
000083cc g     F .text	00000064 uart_send
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008a70 g     O .bss	00000004 errno
00008a68 g     O .bss	00000004 alt_argv
00010a4c g       *ABS*	00000000 _gp
000085c4 g     F .text	00000004 usleep
00008a50 g     O .rwdata	00000004 jtag
00008458 g     F .text	00000028 memcpy
0000881c g     F .text	00000064 .hidden __udivsi3
00008a74 g       *ABS*	00000000 __bss_end
000086f8 g     F .text	00000004 alt_dcache_flush_all
00008a58 g       *ABS*	00000000 __ram_rwdata_end
00008a4c g       *ABS*	00000000 __ram_rodata_end
00008880 g     F .text	00000058 .hidden __umodsi3
00008a74 g       *ABS*	00000000 end
000085ec g     F .text	00000084 altera_avalon_uart_write
0000e000 g       *ABS*	00000000 __alt_stack_pointer
00008020 g     F .text	0000003c _start
000085e8 g     F .text	00000004 alt_sys_init
0000811c g     F .text	0000008c lcd_print
00008430 g     F .text	00000028 .hidden __mulsi3
00008a4c g       *ABS*	00000000 __ram_rwdata_start
000088d8 g       *ABS*	00000000 __ram_rodata_start
00008670 g     F .text	00000088 alt_busy_sleep
00008a74 g       *ABS*	00000000 __alt_stack_base
00008a64 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000c0 lcd_init
000081a8 g     F .text	00000224 main
00008a64 g     O .bss	00000004 alt_envp
00008a54 g     O .rwdata	00000004 alt_errno
00008724 g     F .text	00000084 .hidden __divsi3
000088d8 g       *ABS*	00000000 __flash_rodata_start
000085c8 g     F .text	00000020 alt_irq_init
00008a6c g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008a58 g       *ABS*	00000000 _edata
00008a74 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
000087a8 g     F .text	00000074 .hidden __modsi3
0000e000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008708 g     F .text	0000001c strlen
000086fc g     F .text	00000004 alt_icache_flush_all
00008480 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6829314 	ori	gp,gp,2636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a29914 	ori	r2,r2,35428

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e29d14 	ori	r3,r3,35444

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff75f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00084800 	call	8480 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00085600 	call	8560 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff760c>

0000805c <lcd_init>:
#include <unistd.h>
#include "system.h"

void lcd_init() {
    805c:	defffc04 	addi	sp,sp,-16
	usleep(15000);
    8060:	010ea604 	movi	r4,15000
#include <unistd.h>
#include "system.h"

void lcd_init() {
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00315 	stw	ra,12(sp)
    8070:	dc400115 	stw	r17,4(sp)
	usleep(15000);
	ALT_CI_LCD(0,0x38);
    8074:	0021883a 	mov	r16,zero
#include <unistd.h>
#include "system.h"

void lcd_init() {
	usleep(15000);
    8078:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x38);
    807c:	04800e04 	movi	r18,56
    8080:	8485c032 	custom	0,r2,r16,r18

	usleep(4100);
    8084:	01040104 	movi	r4,4100
    8088:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x38);
    808c:	8485c032 	custom	0,r2,r16,r18

	usleep(100);
    8090:	04401904 	movi	r17,100
    8094:	8809883a 	mov	r4,r17
    8098:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x38);
    809c:	8485c032 	custom	0,r2,r16,r18

	usleep(5000);
    80a0:	0104e204 	movi	r4,5000
    80a4:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x38);
    80a8:	84a5c032 	custom	0,r18,r16,r18

	usleep(100);
    80ac:	8809883a 	mov	r4,r17
    80b0:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x08);
    80b4:	00800204 	movi	r2,8
    80b8:	8085c032 	custom	0,r2,r16,r2

	usleep(100);
    80bc:	8809883a 	mov	r4,r17
    80c0:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x0C);
    80c4:	00800304 	movi	r2,12
    80c8:	8085c032 	custom	0,r2,r16,r2

	usleep(100);
    80cc:	8809883a 	mov	r4,r17
    80d0:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x06);
    80d4:	00800184 	movi	r2,6
    80d8:	8085c032 	custom	0,r2,r16,r2

	usleep(100);
    80dc:	8809883a 	mov	r4,r17
    80e0:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x02);
    80e4:	00800084 	movi	r2,2
    80e8:	8085c032 	custom	0,r2,r16,r2

	usleep(2000);
    80ec:	0441f404 	movi	r17,2000
    80f0:	8809883a 	mov	r4,r17
    80f4:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x01);
    80f8:	00800044 	movi	r2,1
    80fc:	80a1c032 	custom	0,r16,r16,r2

	usleep(2000);
    8100:	8809883a 	mov	r4,r17
}
    8104:	dfc00317 	ldw	ra,12(sp)
    8108:	dc800217 	ldw	r18,8(sp)
    810c:	dc400117 	ldw	r17,4(sp)
    8110:	dc000017 	ldw	r16,0(sp)
    8114:	dec00404 	addi	sp,sp,16
	ALT_CI_LCD(0,0x02);

	usleep(2000);
	ALT_CI_LCD(0,0x01);

	usleep(2000);
    8118:	00085c41 	jmpi	85c4 <usleep>

0000811c <lcd_print>:
}

void lcd_print(char m[16], int n) {
    811c:	defffb04 	addi	sp,sp,-20
    8120:	dc800215 	stw	r18,8(sp)
    8124:	2025883a 	mov	r18,r4
	usleep(2000);
    8128:	0101f404 	movi	r4,2000
	ALT_CI_LCD(0,0x01);

	usleep(2000);
}

void lcd_print(char m[16], int n) {
    812c:	dcc00315 	stw	r19,12(sp)
    8130:	dfc00415 	stw	ra,16(sp)
    8134:	dc400115 	stw	r17,4(sp)
    8138:	dc000015 	stw	r16,0(sp)
    813c:	2827883a 	mov	r19,r5
	usleep(2000);
    8140:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x02);
    8144:	00800084 	movi	r2,2
    8148:	0085c032 	custom	0,r2,zero,r2

	usleep(2000);
    814c:	0101f404 	movi	r4,2000
    8150:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x01);
    8154:	00800044 	movi	r2,1
    8158:	0087c032 	custom	0,r3,zero,r2

	for(int i = 0; i < n; i++) {
    815c:	9021883a 	mov	r16,r18
		usleep(2000);
		ALT_CI_LCD(1,m[i]);
    8160:	1023883a 	mov	r17,r2
	ALT_CI_LCD(0,0x02);

	usleep(2000);
	ALT_CI_LCD(0,0x01);

	for(int i = 0; i < n; i++) {
    8164:	8485c83a 	sub	r2,r16,r18
		usleep(2000);
    8168:	0101f404 	movi	r4,2000
	ALT_CI_LCD(0,0x02);

	usleep(2000);
	ALT_CI_LCD(0,0x01);

	for(int i = 0; i < n; i++) {
    816c:	14c0050e 	bge	r2,r19,8184 <lcd_print+0x68>
		usleep(2000);
    8170:	00085c40 	call	85c4 <usleep>
		ALT_CI_LCD(1,m[i]);
    8174:	80800007 	ldb	r2,0(r16)
    8178:	8885c032 	custom	0,r2,r17,r2
    817c:	84000044 	addi	r16,r16,1
    8180:	003ff806 	br	8164 <_gp+0xffff7718>
	}

	usleep(2000);
    8184:	00085c40 	call	85c4 <usleep>
	ALT_CI_LCD(0,0x00);
    8188:	0005c032 	custom	0,r2,zero,zero
}
    818c:	dfc00417 	ldw	ra,16(sp)
    8190:	dcc00317 	ldw	r19,12(sp)
    8194:	dc800217 	ldw	r18,8(sp)
    8198:	dc400117 	ldw	r17,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00504 	addi	sp,sp,20
    81a4:	f800283a 	ret

000081a8 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "lcd.h"
#include "uart.h"

int main() {
    81a8:	deffe204 	addi	sp,sp,-120
    81ac:	dfc01d15 	stw	ra,116(sp)
    81b0:	dd401c15 	stw	r21,112(sp)
    81b4:	dd001b15 	stw	r20,108(sp)
    81b8:	dc401815 	stw	r17,96(sp)
    81bc:	dc001715 	stw	r16,92(sp)
    81c0:	dcc01a15 	stw	r19,104(sp)
    81c4:	dc801915 	stw	r18,100(sp)
	lcd_init();
    81c8:	000805c0 	call	805c <lcd_init>

	uart_send(WIFI_MODE);
    81cc:	01000074 	movhi	r4,1
    81d0:	21223604 	addi	r4,r4,-30504
    81d4:	00083cc0 	call	83cc <uart_send>
	uart_send(WIFI_CONNECT);
    81d8:	01000074 	movhi	r4,1
    81dc:	21223904 	addi	r4,r4,-30492
    81e0:	00083cc0 	call	83cc <uart_send>


	char opcoes[5][7]   = {"Menu 01", "Menu 02", "Menu 03", "Menu 04", "Menu 05"};
    81e4:	01400074 	movhi	r5,1
    81e8:	018008c4 	movi	r6,35
    81ec:	29627ac4 	addi	r5,r5,-30229
    81f0:	d9000dc4 	addi	r4,sp,55
    81f4:	00084580 	call	8458 <memcpy>
	char submenu[5][11] = {"Mensagem 01", "Mensagem 02", "Mensagem 03", "Mensagem 04", "Mensagem 05"};
    81f8:	01400074 	movhi	r5,1
    81fc:	01800dc4 	movi	r6,55
    8200:	29628384 	addi	r5,r5,-30194
    8204:	d809883a 	mov	r4,sp
	int estadoBotao = 0;
	int estado = 0;
	int menu = 0;

	while(1){
		estadoBotao = IORD(PI_BASE,0);
    8208:	05400074 	movhi	r21,1

				uart_send(TCP_DISCONNECT);

			}else {
				lcd_print(opcoes[menu], 7);
				IOWR(PO_BASE, 0, 15);
    820c:	05000074 	movhi	r20,1
	uart_send(WIFI_MODE);
	uart_send(WIFI_CONNECT);


	char opcoes[5][7]   = {"Menu 01", "Menu 02", "Menu 03", "Menu 04", "Menu 05"};
	char submenu[5][11] = {"Mensagem 01", "Mensagem 02", "Mensagem 03", "Mensagem 04", "Mensagem 05"};
    8210:	00084580 	call	8458 <memcpy>

	int isSubMenu = 0;
	int estadoBotao = 0;
	int estado = 0;
	int menu = 0;
    8214:	0021883a 	mov	r16,zero


	char opcoes[5][7]   = {"Menu 01", "Menu 02", "Menu 03", "Menu 04", "Menu 05"};
	char submenu[5][11] = {"Mensagem 01", "Mensagem 02", "Mensagem 03", "Mensagem 04", "Mensagem 05"};

	int isSubMenu = 0;
    8218:	0023883a 	mov	r17,zero
	int estadoBotao = 0;
	int estado = 0;
	int menu = 0;

	while(1){
		estadoBotao = IORD(PI_BASE,0);
    821c:	ad440c04 	addi	r21,r21,4144

				uart_send(TCP_DISCONNECT);

			}else {
				lcd_print(opcoes[menu], 7);
				IOWR(PO_BASE, 0, 15);
    8220:	a5040804 	addi	r20,r20,4128
	int estadoBotao = 0;
	int estado = 0;
	int menu = 0;

	while(1){
		estadoBotao = IORD(PI_BASE,0);
    8224:	ac800037 	ldwio	r18,0(r21)
		usleep(100000);
    8228:	010000b4 	movhi	r4,2
    822c:	2121a804 	addi	r4,r4,-31072

		switch(estadoBotao){
    8230:	04c002c4 	movi	r19,11
	int estado = 0;
	int menu = 0;

	while(1){
		estadoBotao = IORD(PI_BASE,0);
		usleep(100000);
    8234:	00085c40 	call	85c4 <usleep>

		switch(estadoBotao){
    8238:	94c00e26 	beq	r18,r19,8274 <main+0xcc>
    823c:	9c800316 	blt	r19,r18,824c <main+0xa4>
    8240:	008001c4 	movi	r2,7
    8244:	90800626 	beq	r18,r2,8260 <main+0xb8>
    8248:	003ff606 	br	8224 <_gp+0xffff77d8>
    824c:	00800344 	movi	r2,13
    8250:	90800c26 	beq	r18,r2,8284 <main+0xdc>
    8254:	00800384 	movi	r2,14
    8258:	90800c26 	beq	r18,r2,828c <main+0xe4>
    825c:	003ff106 	br	8224 <_gp+0xffff77d8>
			case 7:
				if(!isSubMenu) {
    8260:	8800381e 	bne	r17,zero,8344 <main+0x19c>
					if(menu < 4) menu += 1;
    8264:	008000c4 	movi	r2,3
    8268:	14003816 	blt	r2,r16,834c <main+0x1a4>
    826c:	84000044 	addi	r16,r16,1
    8270:	00003906 	br	8358 <main+0x1b0>
				}

				break;

			case 11:
				if(!isSubMenu){
    8274:	8800331e 	bne	r17,zero,8344 <main+0x19c>
					if(menu > 0) menu -= 1;
    8278:	80003626 	beq	r16,zero,8354 <main+0x1ac>
    827c:	843fffc4 	addi	r16,r16,-1
    8280:	00003506 	br	8358 <main+0x1b0>
				}

				break;

			case 13:
				if(!isSubMenu) {
    8284:	88000326 	beq	r17,zero,8294 <main+0xec>
    8288:	00002e06 	br	8344 <main+0x19c>
				}

				break;

			case 14:
				if(isSubMenu) {
    828c:	8800321e 	bne	r17,zero,8358 <main+0x1b0>
    8290:	003fe406 	br	8224 <_gp+0xffff77d8>
				break;
		}

		if(estado) {
			if(isSubMenu) {
				lcd_print(submenu[menu], 11);
    8294:	980b883a 	mov	r5,r19
    8298:	8009883a 	mov	r4,r16
    829c:	00084300 	call	8430 <__mulsi3>
    82a0:	980b883a 	mov	r5,r19
    82a4:	d889883a 	add	r4,sp,r2
    82a8:	000811c0 	call	811c <lcd_print>
				IOWR(PO_BASE, 0, menu);
    82ac:	a4000035 	stwio	r16,0(r20)

				uart_send(TCP_CONNECT);
    82b0:	01000074 	movhi	r4,1
    82b4:	21224704 	addi	r4,r4,-30436
    82b8:	00083cc0 	call	83cc <uart_send>
				usleep(100000);
    82bc:	010000b4 	movhi	r4,2
    82c0:	2121a804 	addi	r4,r4,-31072
    82c4:	00085c40 	call	85c4 <usleep>

				uart_send(MQTT_CONNECT_SIZE); uart_send(MQTT_CONNECT);
    82c8:	01000074 	movhi	r4,1
    82cc:	21224e04 	addi	r4,r4,-30408
    82d0:	00083cc0 	call	83cc <uart_send>
    82d4:	01000074 	movhi	r4,1
    82d8:	21227504 	addi	r4,r4,-30252
    82dc:	00083cc0 	call	83cc <uart_send>
				usleep(100000);
    82e0:	010000b4 	movhi	r4,2
    82e4:	2121a804 	addi	r4,r4,-31072
    82e8:	00085c40 	call	85c4 <usleep>

				uart_send(MESSAGE_SIZE);
    82ec:	01000074 	movhi	r4,1
    82f0:	21225204 	addi	r4,r4,-30392
    82f4:	00083cc0 	call	83cc <uart_send>
				if(menu == 0)      uart_send(MESSAGE_0);
    82f8:	8000221e 	bne	r16,zero,8384 <main+0x1dc>
    82fc:	01000074 	movhi	r4,1
    8300:	21225604 	addi	r4,r4,-30376
				else if(menu == 1) uart_send(MESSAGE_1);
				else if(menu == 2) uart_send(MESSAGE_2);
				else if(menu == 3) uart_send(MESSAGE_3);
				else 			   uart_send(MESSAGE_4);
    8304:	00083cc0 	call	83cc <uart_send>
				usleep(100000);
    8308:	010000b4 	movhi	r4,2
    830c:	2121a804 	addi	r4,r4,-31072
    8310:	00085c40 	call	85c4 <usleep>

				uart_send(MQTT_DISCONNECT_SIZE); uart_send(MQTT_DISCONNECT);
    8314:	01000074 	movhi	r4,1
    8318:	21224004 	addi	r4,r4,-30464
    831c:	00083cc0 	call	83cc <uart_send>
    8320:	01000074 	movhi	r4,1
    8324:	21227404 	addi	r4,r4,-30256
    8328:	00083cc0 	call	83cc <uart_send>
				usleep(100000);
    832c:	010000b4 	movhi	r4,2
    8330:	2121a804 	addi	r4,r4,-31072
    8334:	00085c40 	call	85c4 <usleep>

				uart_send(TCP_DISCONNECT);
    8338:	01000074 	movhi	r4,1
    833c:	21224404 	addi	r4,r4,-30448
    8340:	00083cc0 	call	83cc <uart_send>
    8344:	04400044 	movi	r17,1
    8348:	003fb606 	br	8224 <_gp+0xffff77d8>

		switch(estadoBotao){
			case 7:
				if(!isSubMenu) {
					if(menu < 4) menu += 1;
					else         menu  = 1;
    834c:	04000044 	movi	r16,1
    8350:	00000106 	br	8358 <main+0x1b0>
				break;

			case 11:
				if(!isSubMenu){
					if(menu > 0) menu -= 1;
					else  		 menu  = 4;
    8354:	04000104 	movi	r16,4
				usleep(100000);

				uart_send(TCP_DISCONNECT);

			}else {
				lcd_print(opcoes[menu], 7);
    8358:	8009883a 	mov	r4,r16
    835c:	014001c4 	movi	r5,7
    8360:	00084300 	call	8430 <__mulsi3>
    8364:	d8c00dc4 	addi	r3,sp,55
    8368:	1889883a 	add	r4,r3,r2
    836c:	014001c4 	movi	r5,7
    8370:	000811c0 	call	811c <lcd_print>
				IOWR(PO_BASE, 0, 15);
    8374:	008003c4 	movi	r2,15
    8378:	a0800035 	stwio	r2,0(r20)
    837c:	0023883a 	mov	r17,zero
    8380:	003fa806 	br	8224 <_gp+0xffff77d8>
				uart_send(MQTT_CONNECT_SIZE); uart_send(MQTT_CONNECT);
				usleep(100000);

				uart_send(MESSAGE_SIZE);
				if(menu == 0)      uart_send(MESSAGE_0);
				else if(menu == 1) uart_send(MESSAGE_1);
    8384:	00800044 	movi	r2,1
    8388:	8080031e 	bne	r16,r2,8398 <main+0x1f0>
    838c:	01000074 	movhi	r4,1
    8390:	21225c04 	addi	r4,r4,-30352
    8394:	003fdb06 	br	8304 <_gp+0xffff78b8>
				else if(menu == 2) uart_send(MESSAGE_2);
    8398:	00800084 	movi	r2,2
    839c:	8080031e 	bne	r16,r2,83ac <main+0x204>
    83a0:	01000074 	movhi	r4,1
    83a4:	21226204 	addi	r4,r4,-30328
    83a8:	003fd606 	br	8304 <_gp+0xffff78b8>
				else if(menu == 3) uart_send(MESSAGE_3);
    83ac:	008000c4 	movi	r2,3
    83b0:	8080031e 	bne	r16,r2,83c0 <main+0x218>
    83b4:	01000074 	movhi	r4,1
    83b8:	21226804 	addi	r4,r4,-30304
    83bc:	003fd106 	br	8304 <_gp+0xffff78b8>
				else 			   uart_send(MESSAGE_4);
    83c0:	01000074 	movhi	r4,1
    83c4:	21226e04 	addi	r4,r4,-30280
    83c8:	003fce06 	br	8304 <_gp+0xffff78b8>

000083cc <uart_send>:
#include "altera_avalon_jtag_uart_regs.h"
#include "altera_avalon_uart_regs.h"

#define CR_LF "\r\n"

void uart_send(char *data) {
    83cc:	deffff04 	addi	sp,sp,-4
    83d0:	dfc00015 	stw	ra,0(sp)
	alt_putstr(data);
    83d4:	000858c0 	call	858c <alt_putstr>
	alt_putstr(CR_LF);
    83d8:	01000074 	movhi	r4,1
    83dc:	21229204 	addi	r4,r4,-30136
    83e0:	000858c0 	call	858c <alt_putstr>

	char r;

    while(1){
    	if(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) & 0x80) {
    83e4:	01800074 	movhi	r6,1
    		r = IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    83e8:	01400074 	movhi	r5,1
    		IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_BASE, r);
    83ec:	01000074 	movhi	r4,1
	alt_putstr(CR_LF);

	char r;

    while(1){
    	if(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) & 0x80) {
    83f0:	31840204 	addi	r6,r6,4104
    		r = IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    83f4:	29440004 	addi	r5,r5,4096
    		IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_BASE, r);
    83f8:	21041204 	addi	r4,r4,4168

    		if(r == 'K') {
    83fc:	00c012c4 	movi	r3,75
	alt_putstr(CR_LF);

	char r;

    while(1){
    	if(IORD_ALTERA_AVALON_UART_STATUS(RS232_BASE) & 0x80) {
    8400:	30800037 	ldwio	r2,0(r6)
    8404:	1080200c 	andi	r2,r2,128
    8408:	103ffd26 	beq	r2,zero,8400 <_gp+0xffff79b4>
    		r = IORD_ALTERA_AVALON_UART_RXDATA(RS232_BASE);
    840c:	28800037 	ldwio	r2,0(r5)
    		IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_BASE, r);
    8410:	10803fcc 	andi	r2,r2,255
    8414:	1080201c 	xori	r2,r2,128
    8418:	10bfe004 	addi	r2,r2,-128
    841c:	20800035 	stwio	r2,0(r4)

    		if(r == 'K') {
    8420:	10fff71e 	bne	r2,r3,8400 <_gp+0xffff79b4>
    		    return;
    	    }
    	}
    }
}
    8424:	dfc00017 	ldw	ra,0(sp)
    8428:	dec00104 	addi	sp,sp,4
    842c:	f800283a 	ret

00008430 <__mulsi3>:
    8430:	0005883a 	mov	r2,zero
    8434:	20000726 	beq	r4,zero,8454 <__mulsi3+0x24>
    8438:	20c0004c 	andi	r3,r4,1
    843c:	2008d07a 	srli	r4,r4,1
    8440:	18000126 	beq	r3,zero,8448 <__mulsi3+0x18>
    8444:	1145883a 	add	r2,r2,r5
    8448:	294b883a 	add	r5,r5,r5
    844c:	203ffa1e 	bne	r4,zero,8438 <_gp+0xffff79ec>
    8450:	f800283a 	ret
    8454:	f800283a 	ret

00008458 <memcpy>:
    8458:	2005883a 	mov	r2,r4
    845c:	2007883a 	mov	r3,r4
    8460:	218d883a 	add	r6,r4,r6
    8464:	19800526 	beq	r3,r6,847c <memcpy+0x24>
    8468:	29000003 	ldbu	r4,0(r5)
    846c:	18c00044 	addi	r3,r3,1
    8470:	29400044 	addi	r5,r5,1
    8474:	193fffc5 	stb	r4,-1(r3)
    8478:	003ffa06 	br	8464 <_gp+0xffff7a18>
    847c:	f800283a 	ret

00008480 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8480:	deffff04 	addi	sp,sp,-4
    8484:	01000074 	movhi	r4,1
    8488:	01400074 	movhi	r5,1
    848c:	dfc00015 	stw	ra,0(sp)
    8490:	21229304 	addi	r4,r4,-30132
    8494:	29629604 	addi	r5,r5,-30120

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8498:	2140061e 	bne	r4,r5,84b4 <alt_load+0x34>
    849c:	01000074 	movhi	r4,1
    84a0:	01400074 	movhi	r5,1
    84a4:	21200804 	addi	r4,r4,-32736
    84a8:	29600804 	addi	r5,r5,-32736
    84ac:	2140121e 	bne	r4,r5,84f8 <alt_load+0x78>
    84b0:	00000b06 	br	84e0 <alt_load+0x60>
    84b4:	00c00074 	movhi	r3,1
    84b8:	18e29604 	addi	r3,r3,-30120
    84bc:	1907c83a 	sub	r3,r3,r4
    84c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    84c4:	10fff526 	beq	r2,r3,849c <_gp+0xffff7a50>
    {
      *to++ = *from++;
    84c8:	114f883a 	add	r7,r2,r5
    84cc:	39c00017 	ldw	r7,0(r7)
    84d0:	110d883a 	add	r6,r2,r4
    84d4:	10800104 	addi	r2,r2,4
    84d8:	31c00015 	stw	r7,0(r6)
    84dc:	003ff906 	br	84c4 <_gp+0xffff7a78>
    84e0:	01000074 	movhi	r4,1
    84e4:	01400074 	movhi	r5,1
    84e8:	21223604 	addi	r4,r4,-30504
    84ec:	29623604 	addi	r5,r5,-30504

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    84f0:	2140101e 	bne	r4,r5,8534 <alt_load+0xb4>
    84f4:	00000b06 	br	8524 <alt_load+0xa4>
    84f8:	00c00074 	movhi	r3,1
    84fc:	18e00804 	addi	r3,r3,-32736
    8500:	1907c83a 	sub	r3,r3,r4
    8504:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8508:	10fff526 	beq	r2,r3,84e0 <_gp+0xffff7a94>
    {
      *to++ = *from++;
    850c:	114f883a 	add	r7,r2,r5
    8510:	39c00017 	ldw	r7,0(r7)
    8514:	110d883a 	add	r6,r2,r4
    8518:	10800104 	addi	r2,r2,4
    851c:	31c00015 	stw	r7,0(r6)
    8520:	003ff906 	br	8508 <_gp+0xffff7abc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8524:	00086f80 	call	86f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8528:	dfc00017 	ldw	ra,0(sp)
    852c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8530:	00086fc1 	jmpi	86fc <alt_icache_flush_all>
    8534:	00c00074 	movhi	r3,1
    8538:	18e29304 	addi	r3,r3,-30132
    853c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8540:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8544:	18bff726 	beq	r3,r2,8524 <_gp+0xffff7ad8>
    {
      *to++ = *from++;
    8548:	114f883a 	add	r7,r2,r5
    854c:	39c00017 	ldw	r7,0(r7)
    8550:	110d883a 	add	r6,r2,r4
    8554:	10800104 	addi	r2,r2,4
    8558:	31c00015 	stw	r7,0(r6)
    855c:	003ff906 	br	8544 <_gp+0xffff7af8>

00008560 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8560:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8564:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8568:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    856c:	00085c80 	call	85c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8570:	00085e80 	call	85e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8574:	d1a00617 	ldw	r6,-32744(gp)
    8578:	d1600717 	ldw	r5,-32740(gp)
    857c:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8580:	dfc00017 	ldw	ra,0(sp)
    8584:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8588:	00081a81 	jmpi	81a8 <main>

0000858c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    858c:	defffe04 	addi	sp,sp,-8
    8590:	dc000015 	stw	r16,0(sp)
    8594:	dfc00115 	stw	ra,4(sp)
    8598:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    859c:	00087080 	call	8708 <strlen>
    85a0:	01000074 	movhi	r4,1
    85a4:	000f883a 	mov	r7,zero
    85a8:	100d883a 	mov	r6,r2
    85ac:	800b883a 	mov	r5,r16
    85b0:	21229304 	addi	r4,r4,-30132
#else
    return fputs(str, stdout);
#endif
#endif
}
    85b4:	dfc00117 	ldw	ra,4(sp)
    85b8:	dc000017 	ldw	r16,0(sp)
    85bc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    85c0:	00085ec1 	jmpi	85ec <altera_avalon_uart_write>

000085c4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    85c4:	00086701 	jmpi	8670 <alt_busy_sleep>

000085c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    85c8:	deffff04 	addi	sp,sp,-4
    85cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    85d0:	00087000 	call	8700 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    85d4:	00800044 	movi	r2,1
    85d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    85dc:	dfc00017 	ldw	ra,0(sp)
    85e0:	dec00104 	addi	sp,sp,4
    85e4:	f800283a 	ret

000085e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    85e8:	f800283a 	ret

000085ec <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    85ec:	defffd04 	addi	sp,sp,-12
    85f0:	dc400115 	stw	r17,4(sp)
    85f4:	dc000015 	stw	r16,0(sp)
    85f8:	dfc00215 	stw	ra,8(sp)
    85fc:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    8600:	39d0000c 	andi	r7,r7,16384
  count = len;
    8604:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    8608:	20c00017 	ldw	r3,0(r4)
    860c:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    8610:	1080100c 	andi	r2,r2,64
    8614:	10000526 	beq	r2,zero,862c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    8618:	28800044 	addi	r2,r5,1
    861c:	29400007 	ldb	r5,0(r5)
    8620:	19400135 	stwio	r5,4(r3)
      count--;
    8624:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    8628:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
    862c:	3800021e 	bne	r7,zero,8638 <altera_avalon_uart_write+0x4c>
    8630:	803ff51e 	bne	r16,zero,8608 <_gp+0xffff7bbc>
    8634:	00000806 	br	8658 <altera_avalon_uart_write+0x6c>

  if (count)
    8638:	80000726 	beq	r16,zero,8658 <altera_avalon_uart_write+0x6c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    863c:	d0a00217 	ldw	r2,-32760(gp)
    8640:	10000226 	beq	r2,zero,864c <altera_avalon_uart_write+0x60>
    8644:	103ee83a 	callr	r2
    8648:	00000106 	br	8650 <altera_avalon_uart_write+0x64>
    864c:	d0a00904 	addi	r2,gp,-32732
  {
    ALT_ERRNO = EWOULDBLOCK;
    8650:	00c002c4 	movi	r3,11
    8654:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    8658:	8c05c83a 	sub	r2,r17,r16
    865c:	dfc00217 	ldw	ra,8(sp)
    8660:	dc400117 	ldw	r17,4(sp)
    8664:	dc000017 	ldw	r16,0(sp)
    8668:	dec00304 	addi	sp,sp,12
    866c:	f800283a 	ret

00008670 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8670:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8674:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8678:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    867c:	dc000015 	stw	r16,0(sp)
    8680:	dfc00115 	stw	ra,4(sp)
    8684:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8688:	000881c0 	call	881c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    868c:	10001026 	beq	r2,zero,86d0 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8690:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8694:	013999b4 	movhi	r4,58982
    8698:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    869c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    86a0:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    86a4:	297fffc4 	addi	r5,r5,-1
    86a8:	283ffe1e 	bne	r5,zero,86a4 <_gp+0xffff7c58>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    86ac:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    86b0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    86b4:	18bffb16 	blt	r3,r2,86a4 <_gp+0xffff7c58>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    86b8:	01400144 	movi	r5,5
    86bc:	8009883a 	mov	r4,r16
    86c0:	00084300 	call	8430 <__mulsi3>
    86c4:	10bfffc4 	addi	r2,r2,-1
    86c8:	103ffe1e 	bne	r2,zero,86c4 <_gp+0xffff7c78>
    86cc:	00000506 	br	86e4 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    86d0:	01400144 	movi	r5,5
    86d4:	8009883a 	mov	r4,r16
    86d8:	00084300 	call	8430 <__mulsi3>
    86dc:	10bfffc4 	addi	r2,r2,-1
    86e0:	00bffe16 	blt	zero,r2,86dc <_gp+0xffff7c90>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    86e4:	0005883a 	mov	r2,zero
    86e8:	dfc00117 	ldw	ra,4(sp)
    86ec:	dc000017 	ldw	r16,0(sp)
    86f0:	dec00204 	addi	sp,sp,8
    86f4:	f800283a 	ret

000086f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    86f8:	f800283a 	ret

000086fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    86fc:	f800283a 	ret

00008700 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8700:	000170fa 	wrctl	ienable,zero
    8704:	f800283a 	ret

00008708 <strlen>:
    8708:	2005883a 	mov	r2,r4
    870c:	10c00007 	ldb	r3,0(r2)
    8710:	18000226 	beq	r3,zero,871c <strlen+0x14>
    8714:	10800044 	addi	r2,r2,1
    8718:	003ffc06 	br	870c <_gp+0xffff7cc0>
    871c:	1105c83a 	sub	r2,r2,r4
    8720:	f800283a 	ret

00008724 <__divsi3>:
    8724:	20001b16 	blt	r4,zero,8794 <__divsi3+0x70>
    8728:	000f883a 	mov	r7,zero
    872c:	28001616 	blt	r5,zero,8788 <__divsi3+0x64>
    8730:	200d883a 	mov	r6,r4
    8734:	29001a2e 	bgeu	r5,r4,87a0 <__divsi3+0x7c>
    8738:	00800804 	movi	r2,32
    873c:	00c00044 	movi	r3,1
    8740:	00000106 	br	8748 <__divsi3+0x24>
    8744:	10000d26 	beq	r2,zero,877c <__divsi3+0x58>
    8748:	294b883a 	add	r5,r5,r5
    874c:	10bfffc4 	addi	r2,r2,-1
    8750:	18c7883a 	add	r3,r3,r3
    8754:	293ffb36 	bltu	r5,r4,8744 <_gp+0xffff7cf8>
    8758:	0005883a 	mov	r2,zero
    875c:	18000726 	beq	r3,zero,877c <__divsi3+0x58>
    8760:	0005883a 	mov	r2,zero
    8764:	31400236 	bltu	r6,r5,8770 <__divsi3+0x4c>
    8768:	314dc83a 	sub	r6,r6,r5
    876c:	10c4b03a 	or	r2,r2,r3
    8770:	1806d07a 	srli	r3,r3,1
    8774:	280ad07a 	srli	r5,r5,1
    8778:	183ffa1e 	bne	r3,zero,8764 <_gp+0xffff7d18>
    877c:	38000126 	beq	r7,zero,8784 <__divsi3+0x60>
    8780:	0085c83a 	sub	r2,zero,r2
    8784:	f800283a 	ret
    8788:	014bc83a 	sub	r5,zero,r5
    878c:	39c0005c 	xori	r7,r7,1
    8790:	003fe706 	br	8730 <_gp+0xffff7ce4>
    8794:	0109c83a 	sub	r4,zero,r4
    8798:	01c00044 	movi	r7,1
    879c:	003fe306 	br	872c <_gp+0xffff7ce0>
    87a0:	00c00044 	movi	r3,1
    87a4:	003fee06 	br	8760 <_gp+0xffff7d14>

000087a8 <__modsi3>:
    87a8:	20001716 	blt	r4,zero,8808 <__modsi3+0x60>
    87ac:	000f883a 	mov	r7,zero
    87b0:	2005883a 	mov	r2,r4
    87b4:	28001216 	blt	r5,zero,8800 <__modsi3+0x58>
    87b8:	2900162e 	bgeu	r5,r4,8814 <__modsi3+0x6c>
    87bc:	01800804 	movi	r6,32
    87c0:	00c00044 	movi	r3,1
    87c4:	00000106 	br	87cc <__modsi3+0x24>
    87c8:	30000a26 	beq	r6,zero,87f4 <__modsi3+0x4c>
    87cc:	294b883a 	add	r5,r5,r5
    87d0:	31bfffc4 	addi	r6,r6,-1
    87d4:	18c7883a 	add	r3,r3,r3
    87d8:	293ffb36 	bltu	r5,r4,87c8 <_gp+0xffff7d7c>
    87dc:	18000526 	beq	r3,zero,87f4 <__modsi3+0x4c>
    87e0:	1806d07a 	srli	r3,r3,1
    87e4:	11400136 	bltu	r2,r5,87ec <__modsi3+0x44>
    87e8:	1145c83a 	sub	r2,r2,r5
    87ec:	280ad07a 	srli	r5,r5,1
    87f0:	183ffb1e 	bne	r3,zero,87e0 <_gp+0xffff7d94>
    87f4:	38000126 	beq	r7,zero,87fc <__modsi3+0x54>
    87f8:	0085c83a 	sub	r2,zero,r2
    87fc:	f800283a 	ret
    8800:	014bc83a 	sub	r5,zero,r5
    8804:	003fec06 	br	87b8 <_gp+0xffff7d6c>
    8808:	0109c83a 	sub	r4,zero,r4
    880c:	01c00044 	movi	r7,1
    8810:	003fe706 	br	87b0 <_gp+0xffff7d64>
    8814:	00c00044 	movi	r3,1
    8818:	003ff106 	br	87e0 <_gp+0xffff7d94>

0000881c <__udivsi3>:
    881c:	200d883a 	mov	r6,r4
    8820:	2900152e 	bgeu	r5,r4,8878 <__udivsi3+0x5c>
    8824:	28001416 	blt	r5,zero,8878 <__udivsi3+0x5c>
    8828:	00800804 	movi	r2,32
    882c:	00c00044 	movi	r3,1
    8830:	00000206 	br	883c <__udivsi3+0x20>
    8834:	10000e26 	beq	r2,zero,8870 <__udivsi3+0x54>
    8838:	28000516 	blt	r5,zero,8850 <__udivsi3+0x34>
    883c:	294b883a 	add	r5,r5,r5
    8840:	10bfffc4 	addi	r2,r2,-1
    8844:	18c7883a 	add	r3,r3,r3
    8848:	293ffa36 	bltu	r5,r4,8834 <_gp+0xffff7de8>
    884c:	18000826 	beq	r3,zero,8870 <__udivsi3+0x54>
    8850:	0005883a 	mov	r2,zero
    8854:	31400236 	bltu	r6,r5,8860 <__udivsi3+0x44>
    8858:	314dc83a 	sub	r6,r6,r5
    885c:	10c4b03a 	or	r2,r2,r3
    8860:	1806d07a 	srli	r3,r3,1
    8864:	280ad07a 	srli	r5,r5,1
    8868:	183ffa1e 	bne	r3,zero,8854 <_gp+0xffff7e08>
    886c:	f800283a 	ret
    8870:	0005883a 	mov	r2,zero
    8874:	f800283a 	ret
    8878:	00c00044 	movi	r3,1
    887c:	003ff406 	br	8850 <_gp+0xffff7e04>

00008880 <__umodsi3>:
    8880:	2005883a 	mov	r2,r4
    8884:	2900122e 	bgeu	r5,r4,88d0 <__umodsi3+0x50>
    8888:	28001116 	blt	r5,zero,88d0 <__umodsi3+0x50>
    888c:	01800804 	movi	r6,32
    8890:	00c00044 	movi	r3,1
    8894:	00000206 	br	88a0 <__umodsi3+0x20>
    8898:	30000c26 	beq	r6,zero,88cc <__umodsi3+0x4c>
    889c:	28000516 	blt	r5,zero,88b4 <__umodsi3+0x34>
    88a0:	294b883a 	add	r5,r5,r5
    88a4:	31bfffc4 	addi	r6,r6,-1
    88a8:	18c7883a 	add	r3,r3,r3
    88ac:	293ffa36 	bltu	r5,r4,8898 <_gp+0xffff7e4c>
    88b0:	18000626 	beq	r3,zero,88cc <__umodsi3+0x4c>
    88b4:	1806d07a 	srli	r3,r3,1
    88b8:	11400136 	bltu	r2,r5,88c0 <__umodsi3+0x40>
    88bc:	1145c83a 	sub	r2,r2,r5
    88c0:	280ad07a 	srli	r5,r5,1
    88c4:	183ffb1e 	bne	r3,zero,88b4 <_gp+0xffff7e68>
    88c8:	f800283a 	ret
    88cc:	f800283a 	ret
    88d0:	00c00044 	movi	r3,1
    88d4:	003ff706 	br	88b4 <_gp+0xffff7e68>
